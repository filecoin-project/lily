// Code generated by: `make actors-gen`. DO NOT EDIT.
package builtin

import (
	"fmt"
	"strings"

	"github.com/filecoin-project/go-address"
	"github.com/ipfs/go-cid"

	builtin0 "github.com/filecoin-project/specs-actors/actors/builtin"
	smoothing0 "github.com/filecoin-project/specs-actors/actors/util/smoothing"

	builtin2 "github.com/filecoin-project/specs-actors/v2/actors/builtin"
	smoothing2 "github.com/filecoin-project/specs-actors/v2/actors/util/smoothing"

	builtin3 "github.com/filecoin-project/specs-actors/v3/actors/builtin"
	smoothing3 "github.com/filecoin-project/specs-actors/v3/actors/util/smoothing"

	builtin4 "github.com/filecoin-project/specs-actors/v4/actors/builtin"
	smoothing4 "github.com/filecoin-project/specs-actors/v4/actors/util/smoothing"

	builtin5 "github.com/filecoin-project/specs-actors/v5/actors/builtin"
	smoothing5 "github.com/filecoin-project/specs-actors/v5/actors/util/smoothing"

	builtin6 "github.com/filecoin-project/specs-actors/v6/actors/builtin"
	smoothing6 "github.com/filecoin-project/specs-actors/v6/actors/util/smoothing"

	builtin7 "github.com/filecoin-project/specs-actors/v7/actors/builtin"
	smoothing7 "github.com/filecoin-project/specs-actors/v7/actors/util/smoothing"

	builtin8 "github.com/filecoin-project/specs-actors/v8/actors/builtin"
	smoothing8 "github.com/filecoin-project/specs-actors/v8/actors/util/smoothing"

	"github.com/filecoin-project/go-state-types/abi"
	"github.com/filecoin-project/go-state-types/cbor"
	"github.com/filecoin-project/lotus/chain/actors"

	"github.com/filecoin-project/lily/chain/actors/adt"

	miner8 "github.com/filecoin-project/specs-actors/v8/actors/builtin/miner"
	proof8 "github.com/filecoin-project/specs-actors/v8/actors/runtime/proof"
)

const (
	EpochDurationSeconds = builtin8.EpochDurationSeconds
)

// These are all just type aliases across actor versions. In the future, that might change
// and we might need to do something fancier.
type PoStProof = proof8.PoStProof
type FilterEstimate = smoothing0.FilterEstimate

func QAPowerForWeight(size abi.SectorSize, duration abi.ChainEpoch, dealWeight, verifiedWeight abi.DealWeight) abi.StoragePower {
	return miner8.QAPowerForWeight(size, duration, dealWeight, verifiedWeight)
}

func FromV0FilterEstimate(v0 smoothing0.FilterEstimate) FilterEstimate {

	return (FilterEstimate)(v0) //nolint:unconvert

}

func FromV2FilterEstimate(v2 smoothing2.FilterEstimate) FilterEstimate {

	return (FilterEstimate)(v2)

}

func FromV3FilterEstimate(v3 smoothing3.FilterEstimate) FilterEstimate {

	return (FilterEstimate)(v3)

}

func FromV4FilterEstimate(v4 smoothing4.FilterEstimate) FilterEstimate {

	return (FilterEstimate)(v4)

}

func FromV5FilterEstimate(v5 smoothing5.FilterEstimate) FilterEstimate {

	return (FilterEstimate)(v5)

}

func FromV6FilterEstimate(v6 smoothing6.FilterEstimate) FilterEstimate {

	return (FilterEstimate)(v6)

}

func FromV7FilterEstimate(v7 smoothing7.FilterEstimate) FilterEstimate {

	return (FilterEstimate)(v7)

}

func FromV8FilterEstimate(v8 smoothing8.FilterEstimate) FilterEstimate {

	return (FilterEstimate)(v8)

}

type ActorStateLoader func(store adt.Store, root cid.Cid) (cbor.Marshaler, error)

func ActorNameByCode(c cid.Cid) string {
	if name, version, ok := actors.GetActorMetaByCode(c); ok {
		return fmt.Sprintf("fil/%d/%s", version, name)
	}

	switch {

	case builtin0.IsBuiltinActor(c):
		return builtin0.ActorNameByCode(c)

	case builtin2.IsBuiltinActor(c):
		return builtin2.ActorNameByCode(c)

	case builtin3.IsBuiltinActor(c):
		return builtin3.ActorNameByCode(c)

	case builtin4.IsBuiltinActor(c):
		return builtin4.ActorNameByCode(c)

	case builtin5.IsBuiltinActor(c):
		return builtin5.ActorNameByCode(c)

	case builtin6.IsBuiltinActor(c):
		return builtin6.ActorNameByCode(c)

	case builtin7.IsBuiltinActor(c):
		return builtin7.ActorNameByCode(c)

	case builtin8.IsBuiltinActor(c):
		return builtin8.ActorNameByCode(c)

	default:
		return "<unknown>"
	}
}

func ActorFamily(name string) string {
	if name == "<unknown>" {
		return "<unknown>"
	}

	if !strings.HasPrefix(name, "fil/") {
		return "<unknown>"
	}
	idx := strings.LastIndex(name, "/")
	if idx == -1 {
		return "<unknown>"
	}

	return name[idx+1:]
}

func makeAddress(addr string) address.Address {
	ret, err := address.NewFromString(addr)
	if err != nil {
		panic(err)
	}

	return ret
}
