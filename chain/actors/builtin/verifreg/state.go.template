// Code generated by: `make actors-gen`. DO NOT EDIT.
package verifreg

import (
    "fmt"

	"github.com/filecoin-project/go-address"
	"github.com/filecoin-project/go-state-types/abi"
	"github.com/ipfs/go-cid"

	"github.com/filecoin-project/lily/chain/actors/adt"

{{if (le .v 1)}}
    sha256simd "github.com/minio/sha256-simd"
{{else}}
    "crypto/sha256"
{{end}}

{{if (le .v 7)}}
    {{if (ge .v 3)}}
        builtin{{.v}} "github.com/filecoin-project/specs-actors{{.import}}actors/builtin"
    {{end}}
    verifreg{{.v}} "github.com/filecoin-project/specs-actors{{.import}}actors/builtin/verifreg"
	adt{{.v}} "github.com/filecoin-project/specs-actors{{.import}}actors/util/adt"
{{else}}
	verifreg{{.v}} "github.com/filecoin-project/go-state-types/builtin{{.import}}verifreg"
	adt{{.v}} "github.com/filecoin-project/go-state-types/builtin{{.import}}util/adt"
	builtin{{.v}} "github.com/filecoin-project/go-state-types/builtin"
{{end}}
{{if (ge .v 9)}}
	"github.com/filecoin-project/go-state-types/big"
{{else}}
    verifreg9 "github.com/filecoin-project/go-state-types/builtin/v9/verifreg"
{{end}}

	"github.com/filecoin-project/lily/chain/actors"
)

var _ State = (*state{{.v}})(nil)

func load{{.v}}(store adt.Store, root cid.Cid) (State, error) {
	out := state{{.v}}{store: store}
	err := store.Get(store.Context(), root, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

type state{{.v}} struct {
	verifreg{{.v}}.State
	store adt.Store
}

func (s *state{{.v}}) ActorKey() string {
    return actors.VerifregKey
}

func (s *state{{.v}}) ActorVersion() actors.Version {
    return actors.Version{{.v}}
}

func (s *state{{.v}}) Code() cid.Cid {
	code, ok := actors.GetActorCodeID(s.ActorVersion(), s.ActorKey())
	if !ok {
		panic(fmt.Errorf("didn't find actor %v code id for actor version %d", s.ActorKey(), s.ActorVersion()))
	}

	return code
}

func (s *state{{.v}}) VerifiedClientsMapBitWidth() int {
    {{if (ge .v 3)}}
        return builtin{{.v}}.DefaultHamtBitwidth
    {{else}}
        return 5
    {{end}}
}

func (s *state{{.v}}) VerifiedClientsMapHashFunction() func(input []byte) []byte {
    {{if (le .v 1)}}
        return func(input []byte) []byte {
            res := sha256simd.Sum256(input)
            return res[:]
        }
    {{else}}
        return func(input []byte) []byte {
            res := sha256.Sum256(input)
            return res[:]
        }
    {{end}}
}

func (s *state{{.v}}) VerifiedClientsMap() (adt.Map, error) {
{{if (le .v 8)}}
	return adt{{.v}}.AsMap(s.store, s.VerifiedClients{{if (ge .v 3)}}, builtin{{.v}}.DefaultHamtBitwidth{{end}})
{{else}}
    return nil, fmt.Errorf("unsupported in actors v{{.v}}")
{{end}}
}


func (s *state{{.v}}) VerifiersMap() (adt.Map, error) {
	return adt{{.v}}.AsMap(s.store, s.Verifiers{{if (ge .v 3)}}, builtin{{.v}}.DefaultHamtBitwidth{{end}})
}

func (s *state{{.v}}) VerifiersMapBitWidth() int {
    {{if (ge .v 3)}}
        return builtin{{.v}}.DefaultHamtBitwidth
    {{else}}
        return 5
    {{end}}
}

func (s *state{{.v}}) VerifiersMapHashFunction() func(input []byte) []byte {
    {{if (le .v 1)}}
        return func(input []byte) []byte {
            res := sha256simd.Sum256(input)
            return res[:]
        }
    {{else}}
        return func(input []byte) []byte {
            res := sha256.Sum256(input)
            return res[:]
        }
    {{end}}
}

func (s *state{{.v}}) RootKey() (address.Address, error) {
	return s.State.RootKey, nil
}

func (s *state{{.v}}) VerifiedClientDataCap(addr address.Address) (bool, abi.StoragePower, error) {
{{if (le .v 8)}}
	return getDataCap(s.store, actors.Version{{.v}}, s.VerifiedClientsMap, addr)
{{else}}
    return false, big.Zero(), fmt.Errorf("unsupported in actors v{{.v}}")
{{end}}
}

func (s *state{{.v}}) VerifierDataCap(addr address.Address) (bool, abi.StoragePower, error) {
	return getDataCap(s.store, actors.Version{{.v}}, s.VerifiersMap, addr)
}

func (s *state{{.v}}) RemoveDataCapProposalID(verifier address.Address, client address.Address) (bool, uint64, error) {
	return getRemoveDataCapProposalID(s.store, actors.Version{{.v}}, s.removeDataCapProposalIDs, verifier, client)
}

func (s *state{{.v}}) ForEachVerifier(cb func(addr address.Address, dcap abi.StoragePower) error) error {
	return forEachCap(s.store, actors.Version{{.v}}, s.VerifiersMap, cb)
}

func (s *state{{.v}}) ForEachClient(cb func(addr address.Address, dcap abi.StoragePower) error) error {
{{if (le .v 8)}}
	return forEachCap(s.store, actors.Version{{.v}}, s.VerifiedClientsMap, cb)
{{else}}
    return fmt.Errorf("unsupported in actors v{{.v}}")
{{end}}
}

func (s *state{{.v}}) removeDataCapProposalIDs() (adt.Map, error) {
    {{if le .v 6}}return nil, nil
    {{else}}return adt{{.v}}.AsMap(s.store, s.RemoveDataCapProposalIDs, builtin{{.v}}.DefaultHamtBitwidth){{end}}
}

func (s *state{{.v}}) GetState() interface{} {
	return &s.State
}

func (s *state{{.v}}) GetAllocation(clientIdAddr address.Address, allocationId verifreg9.AllocationId) (*verifreg9.Allocation, bool, error) {
{{if (le .v 8)}}
    return nil, false, fmt.Errorf("unsupported in actors v{{.v}}")
{{else}}
    return s.FindAllocation(s.store, clientIdAddr, allocationId)
{{end}}
}

func (s *state{{.v}}) GetAllocations(clientIdAddr address.Address) (map[verifreg9.AllocationId]verifreg9.Allocation, error) {
{{if (le .v 8)}}
    return nil, fmt.Errorf("unsupported in actors v{{.v}}")
{{else}}
	return s.LoadAllocationsToMap(s.store, clientIdAddr)
{{end}}
}

func (s *state{{.v}}) GetClaim(providerIdAddr address.Address, claimId verifreg9.ClaimId) (*verifreg9.Claim, bool, error) {
{{if (le .v 8)}}
    return nil, false, fmt.Errorf("unsupported in actors v{{.v}}")
{{else}}
	return s.FindClaim(s.store, providerIdAddr, claimId)
{{end}}
}

func (s *state{{.v}}) GetClaims(providerIdAddr address.Address) (map[verifreg9.ClaimId]verifreg9.Claim, error) {
{{if (le .v 8)}}
    return nil, fmt.Errorf("unsupported in actors v{{.v}}")
{{else}}
	return s.LoadClaimsToMap(s.store, providerIdAddr)
{{end}}
}
