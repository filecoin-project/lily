// Code generated by: `make actors-gen`. DO NOT EDIT.
package verifreg

import (
	"fmt"

	"github.com/filecoin-project/go-address"
	"github.com/filecoin-project/go-state-types/abi"
	"github.com/ipfs/go-cid"

	"github.com/filecoin-project/lily/chain/actors/adt"

	"crypto/sha256"

	builtin12 "github.com/filecoin-project/go-state-types/builtin"
	adt12 "github.com/filecoin-project/go-state-types/builtin/v12/util/adt"
	verifreg12 "github.com/filecoin-project/go-state-types/builtin/v12/verifreg"

	"github.com/filecoin-project/go-state-types/big"

	verifreg9 "github.com/filecoin-project/go-state-types/builtin/v9/verifreg"

	"github.com/filecoin-project/lily/chain/actors"
)

var _ State = (*state12)(nil)

func load12(store adt.Store, root cid.Cid) (State, error) {
	out := state12{store: store}
	err := store.Get(store.Context(), root, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

type state12 struct {
	verifreg12.State
	store adt.Store
}

func (s *state12) ActorKey() string {
	return actors.VerifregKey
}

func (s *state12) ActorVersion() actors.Version {
	return actors.Version12
}

func (s *state12) Code() cid.Cid {
	code, ok := actors.GetActorCodeID(s.ActorVersion(), s.ActorKey())
	if !ok {
		panic(fmt.Errorf("didn't find actor %v code id for actor version %d", s.ActorKey(), s.ActorVersion()))
	}

	return code
}

func (s *state12) VerifiedClientsMapBitWidth() int {

	return builtin12.DefaultHamtBitwidth

}

func (s *state12) VerifiedClientsMapHashFunction() func(input []byte) []byte {

	return func(input []byte) []byte {
		res := sha256.Sum256(input)
		return res[:]
	}

}

func (s *state12) VerifiedClientsMap() (adt.Map, error) {

	return nil, fmt.Errorf("unsupported in actors v12")

}

func (s *state12) VerifiersMap() (adt.Map, error) {
	return adt12.AsMap(s.store, s.Verifiers, builtin12.DefaultHamtBitwidth)
}

func (s *state12) VerifiersMapBitWidth() int {

	return builtin12.DefaultHamtBitwidth

}

func (s *state12) VerifiersMapHashFunction() func(input []byte) []byte {

	return func(input []byte) []byte {
		res := sha256.Sum256(input)
		return res[:]
	}

}

func (s *state12) RootKey() (address.Address, error) {
	return s.State.RootKey, nil
}

func (s *state12) VerifiedClientDataCap(addr address.Address) (bool, abi.StoragePower, error) {

	return false, big.Zero(), fmt.Errorf("unsupported in actors v12")

}

func (s *state12) VerifierDataCap(addr address.Address) (bool, abi.StoragePower, error) {
	return getDataCap(s.store, actors.Version12, s.VerifiersMap, addr)
}

func (s *state12) RemoveDataCapProposalID(verifier address.Address, client address.Address) (bool, uint64, error) {
	return getRemoveDataCapProposalID(s.store, actors.Version12, s.removeDataCapProposalIDs, verifier, client)
}

func (s *state12) ForEachVerifier(cb func(addr address.Address, dcap abi.StoragePower) error) error {
	return forEachCap(s.store, actors.Version12, s.VerifiersMap, cb)
}

func (s *state12) ForEachClient(cb func(addr address.Address, dcap abi.StoragePower) error) error {

	return fmt.Errorf("unsupported in actors v12")

}

func (s *state12) removeDataCapProposalIDs() (adt.Map, error) {
	return adt12.AsMap(s.store, s.RemoveDataCapProposalIDs, builtin12.DefaultHamtBitwidth)
}

func (s *state12) GetState() interface{} {
	return &s.State
}

func (s *state12) GetAllocation(clientIdAddr address.Address, allocationId verifreg9.AllocationId) (*Allocation, bool, error) {

	alloc, ok, err := s.FindAllocation(s.store, clientIdAddr, verifreg12.AllocationId(allocationId))
	return (*Allocation)(alloc), ok, err
}

func (s *state12) GetAllocations(clientIdAddr address.Address) (map[AllocationId]Allocation, error) {

	v12Map, err := s.LoadAllocationsToMap(s.store, clientIdAddr)

	retMap := make(map[AllocationId]Allocation, len(v12Map))
	for k, v := range v12Map {
		retMap[AllocationId(k)] = Allocation(v)
	}

	return retMap, err

}

func (s *state12) GetClaim(providerIdAddr address.Address, claimId verifreg9.ClaimId) (*Claim, bool, error) {

	claim, ok, err := s.FindClaim(s.store, providerIdAddr, verifreg12.ClaimId(claimId))
	return (*Claim)(claim), ok, err

}

func (s *state12) GetClaims(providerIdAddr address.Address) (map[ClaimId]Claim, error) {

	v12Map, err := s.LoadClaimsToMap(s.store, providerIdAddr)

	retMap := make(map[ClaimId]Claim, len(v12Map))
	for k, v := range v12Map {
		retMap[ClaimId(k)] = Claim(v)
	}

	return retMap, err

}
