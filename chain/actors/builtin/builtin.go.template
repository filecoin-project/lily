// Code generated by: `make actors-gen`. DO NOT EDIT.
package builtin

import (
	"strings"
	"fmt"

	"github.com/filecoin-project/go-address"
	"github.com/ipfs/go-cid"

	{{range .versions}}
        builtin{{.}} "github.com/filecoin-project/specs-actors{{import .}}actors/builtin"
        smoothing{{.}} "github.com/filecoin-project/specs-actors{{import .}}actors/util/smoothing"
    {{end}}

	"github.com/filecoin-project/lotus/chain/actors"
	"github.com/filecoin-project/go-state-types/abi"
	"github.com/filecoin-project/go-state-types/cbor"


	"github.com/filecoin-project/lily/chain/actors/adt"

	miner{{.latestVersion}} "github.com/filecoin-project/specs-actors{{import .latestVersion}}actors/builtin/miner"
	proof{{.latestVersion}}  "github.com/filecoin-project/specs-actors{{import .latestVersion}}actors/runtime/proof"
)

const (
	EpochDurationSeconds = builtin{{.latestVersion}}.EpochDurationSeconds
)


// These are all just type aliases across actor versions. In the future, that might change
// and we might need to do something fancier.
type PoStProof = proof{{.latestVersion}}.PoStProof
type FilterEstimate = smoothing0.FilterEstimate

func QAPowerForWeight(size abi.SectorSize, duration abi.ChainEpoch, dealWeight, verifiedWeight abi.DealWeight) abi.StoragePower {
	return miner{{.latestVersion}}.QAPowerForWeight(size, duration, dealWeight, verifiedWeight)
}

{{range .versions}}
    func FromV{{.}}FilterEstimate(v{{.}} smoothing{{.}}.FilterEstimate) FilterEstimate {
	{{if (eq . 0)}}
	    return (FilterEstimate)(v{{.}}) //nolint:unconvert
    {{else}}
        return (FilterEstimate)(v{{.}})
    {{end}}
    }
{{end}}

type ActorStateLoader func(store adt.Store, root cid.Cid) (cbor.Marshaler, error)

func ActorNameByCode(c cid.Cid) string {
	if name, version, ok := actors.GetActorMetaByCode(c); ok {
		return fmt.Sprintf("fil/%d/%s", version, name)
	}

	switch {
	    {{range .versions}}
            case builtin{{.}}.IsBuiltinActor(c):
            return builtin{{.}}.ActorNameByCode(c)
        {{end}}
	default:
		return "<unknown>"
	}
}

func ActorFamily(name string) string {
	if name == "<unknown>" {
		return "<unknown>"
	}

	if !strings.HasPrefix(name, "fil/") {
		return "<unknown>"
	}
	idx := strings.LastIndex(name, "/")
	if idx == -1 {
		return "<unknown>"
	}

	return name[idx+1:]
}


func makeAddress(addr string) address.Address {
	ret, err := address.NewFromString(addr)
	if err != nil {
		panic(err)
	}

	return ret
}
