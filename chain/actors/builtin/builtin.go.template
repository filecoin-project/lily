package builtin

import (
	"fmt"
	"strings"

	"github.com/ipfs/go-cid"

{{range .versions}}
    {{if (le . 7)}}
	    builtin{{.}} "github.com/filecoin-project/specs-actors{{import .}}actors/builtin"
	{{end}}
{{end}}

	"github.com/filecoin-project/go-state-types/proof"
    "github.com/filecoin-project/go-state-types/builtin"

	"github.com/filecoin-project/lotus/chain/actors"

	smoothingtypes "github.com/filecoin-project/go-state-types/builtin/v8/util/smoothing"
)


const (
	EpochDurationSeconds = builtin.EpochDurationSeconds
)


// These are all just type aliases across actor versions. In the future, that might change
// and we might need to do something fancier.
type SectorInfo = proof.SectorInfo
type ExtendedSectorInfo = proof.ExtendedSectorInfo
type PoStProof = proof.PoStProof
type FilterEstimate = smoothingtypes.FilterEstimate

func ActorNameByCode(c cid.Cid) string {
	if name, version, ok := actors.GetActorMetaByCode(c); ok {
		return fmt.Sprintf("fil/%d/%s", version, name)
	}

	switch {
	    {{range .versions}}
	        {{if (le . 7)}}
            case builtin{{.}}.IsBuiltinActor(c):
            return builtin{{.}}.ActorNameByCode(c)
            {{end}}
        {{end}}
	default:
		return "<unknown>"
	}
}

func ActorFamily(name string) string {
	if name == "<unknown>" {
		return "<unknown>"
	}

	if !strings.HasPrefix(name, "fil/") {
		return "<unknown>"
	}
	idx := strings.LastIndex(name, "/")
	if idx == -1 {
		return "<unknown>"
	}

	return name[idx+1:]
}
