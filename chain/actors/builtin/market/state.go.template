// Code generated by: `make actors-gen`. DO NOT EDIT.

package market

import (
	"bytes"
	"fmt"

	"github.com/filecoin-project/go-state-types/abi"
	lotusactors "github.com/filecoin-project/lotus/chain/actors"
	actorstypes "github.com/filecoin-project/go-state-types/actors"
	"github.com/filecoin-project/go-state-types/manifest"
	"github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	"golang.org/x/xerrors"

	"github.com/filecoin-project/lotus/chain/actors/adt"

{{if (ge .v 9)}}
	verifregtypes "github.com/filecoin-project/lotus/chain/actors/builtin/verifreg"
{{end}}

{{if (le .v 7)}}
	market{{.v}} "github.com/filecoin-project/specs-actors{{.import}}actors/builtin/market"
	adt{{.v}} "github.com/filecoin-project/specs-actors{{.import}}actors/util/adt"
{{else}}
	market{{.v}} "github.com/filecoin-project/go-state-types/builtin{{.import}}market"
	markettypes "github.com/filecoin-project/go-state-types/builtin/v9/market"
	adt{{.v}} "github.com/filecoin-project/go-state-types/builtin{{.import}}util/adt"
{{end}}
)

var _ State = (*state{{.v}})(nil)

func load{{.v}}(store adt.Store, root cid.Cid) (State, error) {
	out := state{{.v}}{store: store}
	err := store.Get(store.Context(), root, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func make{{.v}}(store adt.Store) (State, error) {
	out := state{{.v}}{store: store}
	{{if (le .v 2)}}
		ea, err := adt{{.v}}.MakeEmptyArray(store).Root()
		if err != nil {
			return nil, err
		}

		em, err := adt{{.v}}.MakeEmptyMap(store).Root()
		if err != nil {
			return nil, err
		}

		out.State = *market{{.v}}.ConstructState(ea, em, em)
	{{else}}
		s, err := market{{.v}}.ConstructState(store)
		if err != nil {
			return nil, err
		}

		out.State = *s
	{{end}}
	return &out, nil
}

type state{{.v}} struct {
	market{{.v}}.State
	store adt.Store
}

func (s *state{{.v}}) StatesChanged(otherState State) (bool, error) {
	otherState{{.v}}, ok := otherState.(*state{{.v}})
	if !ok {
		// there's no way to compare different versions of the state, so let's
		// just say that means the state of balances has changed
		return true, nil
	}
	return !s.State.States.Equals(otherState{{.v}}.State.States), nil
}

func (s *state{{.v}}) States() (DealStates, error) {
	stateArray, err := adt{{.v}}.AsArray(s.store, s.State.States{{if (ge .v 3)}}, market{{.v}}.StatesAmtBitwidth{{end}})
	if err != nil {
		return nil, err
	}
	return &dealStates{{.v}}{stateArray}, nil
}

func (s *state{{.v}}) ProposalsChanged(otherState State) (bool, error) {
	otherState{{.v}}, ok := otherState.(*state{{.v}})
	if !ok {
		// there's no way to compare different versions of the state, so let's
		// just say that means the state of balances has changed
		return true, nil
	}
	return !s.State.Proposals.Equals(otherState{{.v}}.State.Proposals), nil
}

func (s *state{{.v}}) Proposals() (DealProposals, error) {
	proposalArray, err := adt{{.v}}.AsArray(s.store, s.State.Proposals{{if (ge .v 3)}}, market{{.v}}.ProposalsAmtBitwidth{{end}})
	if err != nil {
		return nil, err
	}
	return &dealProposals{{.v}}{proposalArray}, nil
}

type dealStates{{.v}} struct {
	adt.Array
}

func (s *dealStates{{.v}}) Get(dealID abi.DealID) (DealState, bool, error) {
	var deal{{.v}} market{{.v}}.DealState
	found, err := s.Array.Get(uint64(dealID), &deal{{.v}})
	if err != nil {
		return nil, false, err
	}
	if !found {
		return nil, false, nil
	}
	deal := fromV{{.v}}DealState(deal{{.v}})
	return deal, true, nil
}

func (s *dealStates{{.v}}) ForEach(cb func(dealID abi.DealID, ds DealState) error) error {
	var ds{{.v}} market{{.v}}.DealState
	return s.Array.ForEach(&ds{{.v}}, func(idx int64) error {
		return cb(abi.DealID(idx), fromV{{.v}}DealState(ds{{.v}}))
	})
}

func (s *dealStates{{.v}}) decode(val *cbg.Deferred) (DealState, error) {
	var ds{{.v}} market{{.v}}.DealState
	if err := ds{{.v}}.UnmarshalCBOR(bytes.NewReader(val.Raw)); err != nil {
		return nil, err
	}
	ds := fromV{{.v}}DealState(ds{{.v}})
	return ds, nil
}

func (s *dealStates{{.v}}) array() adt.Array {
	return s.Array
}

func fromV{{.v}}DealState(v{{.v}} market{{.v}}.DealState) DealState {
	return dealStateV{{.v}}{v{{.v}}}
}

type dealStateV{{.v}} struct {
	ds{{.v}} market{{.v}}.DealState
}

func (d dealStateV{{.v}}) SectorStartEpoch() abi.ChainEpoch {
	return d.ds{{.v}}.SectorStartEpoch
}

func (d dealStateV{{.v}}) LastUpdatedEpoch() abi.ChainEpoch {
	return d.ds{{.v}}.LastUpdatedEpoch
}

func (d dealStateV{{.v}}) SlashEpoch() abi.ChainEpoch {
	return d.ds{{.v}}.SlashEpoch
}

func (d dealStateV{{.v}}) Equals(other DealState) bool {
	if ov{{.v}}, ok := other.(dealStateV{{.v}}); ok {
		return d.ds{{.v}} == ov{{.v}}.ds{{.v}}
	}

	if d.SectorStartEpoch() != other.SectorStartEpoch() {
		return false
	}
	if d.LastUpdatedEpoch() != other.LastUpdatedEpoch() {
		return false
	}
	if d.SlashEpoch() != other.SlashEpoch() {
		return false
	}

	return true
}

var _ DealState = (*dealStateV{{.v}})(nil)

type dealProposals{{.v}} struct {
	adt.Array
}

func (s *dealProposals{{.v}}) Get(dealID abi.DealID) (*DealProposal, bool, error) {
	var proposal{{.v}} market{{.v}}.DealProposal
	found, err := s.Array.Get(uint64(dealID), &proposal{{.v}})
	if err != nil {
		return nil, false, err
	}
	if !found {
		return nil, false, nil
	}

    proposal, err := fromV{{.v}}DealProposal(proposal{{.v}})
    if err != nil {
        return nil, true, xerrors.Errorf("decoding proposal: %w", err)
    }

    return &proposal, true, nil
}

func (s *dealProposals{{.v}}) ForEach(cb func(dealID abi.DealID, dp DealProposal) error) error {
	var dp{{.v}} market{{.v}}.DealProposal
	return s.Array.ForEach(&dp{{.v}}, func(idx int64) error {
        dp, err := fromV{{.v}}DealProposal(dp{{.v}})
        if err != nil {
            return xerrors.Errorf("decoding proposal: %w", err)
        }

        return cb(abi.DealID(idx), dp)
	})
}

func (s *dealProposals{{.v}}) decode(val *cbg.Deferred) (*DealProposal, error) {
	var dp{{.v}} market{{.v}}.DealProposal
	if err := dp{{.v}}.UnmarshalCBOR(bytes.NewReader(val.Raw)); err != nil {
		return nil, err
	}

    dp, err := fromV{{.v}}DealProposal(dp{{.v}})
    if err != nil {
        return nil, err
    }

    return &dp, nil
}

func (s *dealProposals{{.v}}) array() adt.Array {
	return s.Array
}

func fromV{{.v}}DealProposal(v{{.v}} market{{.v}}.DealProposal) (DealProposal, error) {
    {{if (le .v 7)}}
        label, err := labelFromGoString(v{{.v}}.Label)
    {{else}}
        label, err := fromV{{.v}}Label(v{{.v}}.Label)
    {{end}}
    if err != nil {
        return DealProposal{}, xerrors.Errorf("error setting deal label: %w", err)
    }

    return DealProposal{
        PieceCID: v{{.v}}.PieceCID,
        PieceSize: v{{.v}}.PieceSize,
        VerifiedDeal: v{{.v}}.VerifiedDeal,
        Client: v{{.v}}.Client,
        Provider: v{{.v}}.Provider,

        Label: label,

        StartEpoch: v{{.v}}.StartEpoch,
        EndEpoch: v{{.v}}.EndEpoch,
        StoragePricePerEpoch: v{{.v}}.StoragePricePerEpoch,

        ProviderCollateral: v{{.v}}.ProviderCollateral,
        ClientCollateral: v{{.v}}.ClientCollateral,
    }, nil
}


func (s *state{{.v}}) DealProposalsAmtBitwidth() int {
    return {{if (ge .v 3)}}market{{.v}}.ProposalsAmtBitwidth{{else}}3{{end}}
}

func (s *state{{.v}}) DealStatesAmtBitwidth() int {
    return {{if (ge .v 3)}}market{{.v}}.StatesAmtBitwidth{{else}}3{{end}}
}

func (s *state{{.v}}) ActorKey() string {
    return manifest.MarketKey
}

func (s *state{{.v}}) ActorVersion() actorstypes.Version {
    return actorstypes.Version{{.v}}
}

func (s *state{{.v}}) Code() cid.Cid {
	code, ok := lotusactors.GetActorCodeID(s.ActorVersion(), s.ActorKey())
	if !ok {
		panic(fmt.Errorf("didn't find actor %v code id for actor version %d", s.ActorKey(), s.ActorVersion()))
	}

	return code
}

{{if (ge .v 8)}}
    func fromV{{.v}}Label(v{{.v}} market{{.v}}.DealLabel) (DealLabel, error) {
        if v{{.v}}.IsString() {
            str, err := v{{.v}}.ToString()
            if err != nil {
                return markettypes.EmptyDealLabel, xerrors.Errorf("failed to convert string label to string: %w", err)
            }
            return markettypes.NewLabelFromString(str)
        }

        bs, err := v{{.v}}.ToBytes()
        if err != nil {
            return markettypes.EmptyDealLabel, xerrors.Errorf("failed to convert bytes label to bytes: %w", err)
        }
        return markettypes.NewLabelFromBytes(bs)
    }
{{end}}