// Code generated by: `make actors-gen`. DO NOT EDIT.

package market

import (
	"bytes"
	"fmt"

	"github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	"golang.org/x/xerrors"

	"github.com/filecoin-project/go-state-types/abi"
	actorstypes "github.com/filecoin-project/go-state-types/actors"
	"github.com/filecoin-project/go-state-types/manifest"
	market4 "github.com/filecoin-project/specs-actors/v4/actors/builtin/market"
	adt4 "github.com/filecoin-project/specs-actors/v4/actors/util/adt"

	lotusactors "github.com/filecoin-project/lotus/chain/actors"
	"github.com/filecoin-project/lotus/chain/actors/adt"
)

var _ State = (*state4)(nil)

func load4(store adt.Store, root cid.Cid) (State, error) {
	out := state4{store: store}
	err := store.Get(store.Context(), root, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func make4(store adt.Store) (State, error) {
	out := state4{store: store}

	s, err := market4.ConstructState(store)
	if err != nil {
		return nil, err
	}

	out.State = *s

	return &out, nil
}

type state4 struct {
	market4.State
	store adt.Store
}

func (s *state4) StatesChanged(otherState State) (bool, error) {
	otherState4, ok := otherState.(*state4)
	if !ok {
		// there's no way to compare different versions of the state, so let's
		// just say that means the state of balances has changed
		return true, nil
	}
	return !s.State.States.Equals(otherState4.State.States), nil
}

func (s *state4) States() (DealStates, error) {
	stateArray, err := adt4.AsArray(s.store, s.State.States, market4.StatesAmtBitwidth)
	if err != nil {
		return nil, err
	}
	return &dealStates4{stateArray}, nil
}

func (s *state4) ProposalsChanged(otherState State) (bool, error) {
	otherState4, ok := otherState.(*state4)
	if !ok {
		// there's no way to compare different versions of the state, so let's
		// just say that means the state of balances has changed
		return true, nil
	}
	return !s.State.Proposals.Equals(otherState4.State.Proposals), nil
}

func (s *state4) Proposals() (DealProposals, error) {
	proposalArray, err := adt4.AsArray(s.store, s.State.Proposals, market4.ProposalsAmtBitwidth)
	if err != nil {
		return nil, err
	}
	return &dealProposals4{proposalArray}, nil
}

type dealStates4 struct {
	adt.Array
}

func (s *dealStates4) Get(dealID abi.DealID) (DealState, bool, error) {
	var deal4 market4.DealState
	found, err := s.Array.Get(uint64(dealID), &deal4)
	if err != nil {
		return nil, false, err
	}
	if !found {
		return nil, false, nil
	}
	deal := fromV4DealState(deal4)
	return deal, true, nil
}

func (s *dealStates4) ForEach(cb func(dealID abi.DealID, ds DealState) error) error {
	var ds4 market4.DealState
	return s.Array.ForEach(&ds4, func(idx int64) error {
		return cb(abi.DealID(idx), fromV4DealState(ds4))
	})
}

func (s *dealStates4) decode(val *cbg.Deferred) (DealState, error) {
	var ds4 market4.DealState
	if err := ds4.UnmarshalCBOR(bytes.NewReader(val.Raw)); err != nil {
		return nil, err
	}
	ds := fromV4DealState(ds4)
	return ds, nil
}

func (s *dealStates4) array() adt.Array {
	return s.Array
}

func fromV4DealState(v4 market4.DealState) DealState {
	return dealStateV4{v4}
}

type dealStateV4 struct {
	ds4 market4.DealState
}

func (d dealStateV4) SectorStartEpoch() abi.ChainEpoch {
	return d.ds4.SectorStartEpoch
}

func (d dealStateV4) SectorNumber() abi.SectorNumber {

	return 0

}

func (d dealStateV4) LastUpdatedEpoch() abi.ChainEpoch {
	return d.ds4.LastUpdatedEpoch
}

func (d dealStateV4) SlashEpoch() abi.ChainEpoch {
	return d.ds4.SlashEpoch
}

func (d dealStateV4) Equals(other DealState) bool {
	if ov4, ok := other.(dealStateV4); ok {
		return d.ds4 == ov4.ds4
	}

	if d.SectorStartEpoch() != other.SectorStartEpoch() {
		return false
	}
	if d.LastUpdatedEpoch() != other.LastUpdatedEpoch() {
		return false
	}
	if d.SlashEpoch() != other.SlashEpoch() {
		return false
	}

	return true
}

var _ DealState = (*dealStateV4)(nil)

type dealProposals4 struct {
	adt.Array
}

func (s *dealProposals4) Get(dealID abi.DealID) (*DealProposal, bool, error) {
	var proposal4 market4.DealProposal
	found, err := s.Array.Get(uint64(dealID), &proposal4)
	if err != nil {
		return nil, false, err
	}
	if !found {
		return nil, false, nil
	}

	proposal, err := fromV4DealProposal(proposal4)
	if err != nil {
		return nil, true, xerrors.Errorf("decoding proposal: %w", err)
	}

	return &proposal, true, nil
}

func (s *dealProposals4) ForEach(cb func(dealID abi.DealID, dp DealProposal) error) error {
	var dp4 market4.DealProposal
	return s.Array.ForEach(&dp4, func(idx int64) error {
		dp, err := fromV4DealProposal(dp4)
		if err != nil {
			return xerrors.Errorf("decoding proposal: %w", err)
		}

		return cb(abi.DealID(idx), dp)
	})
}

func (s *dealProposals4) decode(val *cbg.Deferred) (*DealProposal, error) {
	var dp4 market4.DealProposal
	if err := dp4.UnmarshalCBOR(bytes.NewReader(val.Raw)); err != nil {
		return nil, err
	}

	dp, err := fromV4DealProposal(dp4)
	if err != nil {
		return nil, err
	}

	return &dp, nil
}

func (s *dealProposals4) array() adt.Array {
	return s.Array
}

func fromV4DealProposal(v4 market4.DealProposal) (DealProposal, error) {

	label, err := labelFromGoString(v4.Label)

	if err != nil {
		return DealProposal{}, xerrors.Errorf("error setting deal label: %w", err)
	}

	return DealProposal{
		PieceCID:     v4.PieceCID,
		PieceSize:    v4.PieceSize,
		VerifiedDeal: v4.VerifiedDeal,
		Client:       v4.Client,
		Provider:     v4.Provider,

		Label: label,

		StartEpoch:           v4.StartEpoch,
		EndEpoch:             v4.EndEpoch,
		StoragePricePerEpoch: v4.StoragePricePerEpoch,

		ProviderCollateral: v4.ProviderCollateral,
		ClientCollateral:   v4.ClientCollateral,
	}, nil
}

func (s *state4) DealProposalsAmtBitwidth() int {
	return market4.ProposalsAmtBitwidth
}

func (s *state4) DealStatesAmtBitwidth() int {
	return market4.StatesAmtBitwidth
}

func (s *state4) ActorKey() string {
	return manifest.MarketKey
}

func (s *state4) ActorVersion() actorstypes.Version {
	return actorstypes.Version4
}

func (s *state4) Code() cid.Cid {
	code, ok := lotusactors.GetActorCodeID(s.ActorVersion(), s.ActorKey())
	if !ok {
		panic(fmt.Errorf("didn't find actor %v code id for actor version %d", s.ActorKey(), s.ActorVersion()))
	}

	return code
}

func (s *state4) GetProviderSectors() (map[abi.SectorID][]abi.DealID, error) {

	return nil, nil

}

func (s *state4) GetProviderSectorsByDealID(dealIDMap map[abi.DealID]bool, sectorIDMap map[abi.SectorNumber]bool) (map[abi.DealID]abi.SectorID, error) {

	return nil, nil

}
