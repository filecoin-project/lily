// Code generated by: `make actors-gen`. DO NOT EDIT.

package market

import (
	"bytes"
	"fmt"

	"github.com/filecoin-project/go-state-types/abi"
	"github.com/filecoin-project/lily/chain/actors"
	"github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	"golang.org/x/xerrors"

	"github.com/filecoin-project/lotus/chain/actors/adt"

	market0 "github.com/filecoin-project/specs-actors/actors/builtin/market"
	adt0 "github.com/filecoin-project/specs-actors/actors/util/adt"
)

var _ State = (*state0)(nil)

func load0(store adt.Store, root cid.Cid) (State, error) {
	out := state0{store: store}
	err := store.Get(store.Context(), root, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func make0(store adt.Store) (State, error) {
	out := state0{store: store}

	ea, err := adt0.MakeEmptyArray(store).Root()
	if err != nil {
		return nil, err
	}

	em, err := adt0.MakeEmptyMap(store).Root()
	if err != nil {
		return nil, err
	}

	out.State = *market0.ConstructState(ea, em, em)

	return &out, nil
}

type state0 struct {
	market0.State
	store adt.Store
}

func (s *state0) StatesChanged(otherState State) (bool, error) {
	otherState0, ok := otherState.(*state0)
	if !ok {
		// there's no way to compare different versions of the state, so let's
		// just say that means the state of balances has changed
		return true, nil
	}
	return !s.State.States.Equals(otherState0.State.States), nil
}

func (s *state0) States() (DealStates, error) {
	stateArray, err := adt0.AsArray(s.store, s.State.States)
	if err != nil {
		return nil, err
	}
	return &dealStates0{stateArray}, nil
}

func (s *state0) ProposalsChanged(otherState State) (bool, error) {
	otherState0, ok := otherState.(*state0)
	if !ok {
		// there's no way to compare different versions of the state, so let's
		// just say that means the state of balances has changed
		return true, nil
	}
	return !s.State.Proposals.Equals(otherState0.State.Proposals), nil
}

func (s *state0) Proposals() (DealProposals, error) {
	proposalArray, err := adt0.AsArray(s.store, s.State.Proposals)
	if err != nil {
		return nil, err
	}
	return &dealProposals0{proposalArray}, nil
}

type dealStates0 struct {
	adt.Array
}

func (s *dealStates0) Get(dealID abi.DealID) (*DealState, bool, error) {
	var deal0 market0.DealState
	found, err := s.Array.Get(uint64(dealID), &deal0)
	if err != nil {
		return nil, false, err
	}
	if !found {
		return nil, false, nil
	}
	deal := fromV0DealState(deal0)
	return &deal, true, nil
}

func (s *dealStates0) ForEach(cb func(dealID abi.DealID, ds DealState) error) error {
	var ds0 market0.DealState
	return s.Array.ForEach(&ds0, func(idx int64) error {
		return cb(abi.DealID(idx), fromV0DealState(ds0))
	})
}

func (s *dealStates0) decode(val *cbg.Deferred) (*DealState, error) {
	var ds0 market0.DealState
	if err := ds0.UnmarshalCBOR(bytes.NewReader(val.Raw)); err != nil {
		return nil, err
	}
	ds := fromV0DealState(ds0)
	return &ds, nil
}

func (s *dealStates0) array() adt.Array {
	return s.Array
}

func fromV0DealState(v0 market0.DealState) DealState {

	return DealState{
		SectorStartEpoch: v0.SectorStartEpoch,
		LastUpdatedEpoch: v0.LastUpdatedEpoch,
		SlashEpoch:       v0.SlashEpoch,
		VerifiedClaim:    0,
	}

}

type dealProposals0 struct {
	adt.Array
}

func (s *dealProposals0) Get(dealID abi.DealID) (*DealProposal, bool, error) {
	var proposal0 market0.DealProposal
	found, err := s.Array.Get(uint64(dealID), &proposal0)
	if err != nil {
		return nil, false, err
	}
	if !found {
		return nil, false, nil
	}

	proposal, err := fromV0DealProposal(proposal0)
	if err != nil {
		return nil, true, xerrors.Errorf("decoding proposal: %w", err)
	}

	return &proposal, true, nil
}

func (s *dealProposals0) ForEach(cb func(dealID abi.DealID, dp DealProposal) error) error {
	var dp0 market0.DealProposal
	return s.Array.ForEach(&dp0, func(idx int64) error {
		dp, err := fromV0DealProposal(dp0)
		if err != nil {
			return xerrors.Errorf("decoding proposal: %w", err)
		}

		return cb(abi.DealID(idx), dp)
	})
}

func (s *dealProposals0) decode(val *cbg.Deferred) (*DealProposal, error) {
	var dp0 market0.DealProposal
	if err := dp0.UnmarshalCBOR(bytes.NewReader(val.Raw)); err != nil {
		return nil, err
	}

	dp, err := fromV0DealProposal(dp0)
	if err != nil {
		return nil, err
	}

	return &dp, nil
}

func (s *dealProposals0) array() adt.Array {
	return s.Array
}

func fromV0DealProposal(v0 market0.DealProposal) (DealProposal, error) {

	label, err := labelFromGoString(v0.Label)

	if err != nil {
		return DealProposal{}, xerrors.Errorf("error setting deal label: %w", err)
	}

	return DealProposal{
		PieceCID:     v0.PieceCID,
		PieceSize:    v0.PieceSize,
		VerifiedDeal: v0.VerifiedDeal,
		Client:       v0.Client,
		Provider:     v0.Provider,

		Label: label,

		StartEpoch:           v0.StartEpoch,
		EndEpoch:             v0.EndEpoch,
		StoragePricePerEpoch: v0.StoragePricePerEpoch,

		ProviderCollateral: v0.ProviderCollateral,
		ClientCollateral:   v0.ClientCollateral,
	}, nil
}

func (s *state0) DealProposalsAmtBitwidth() int {
	return 3
}

func (s *state0) DealStatesAmtBitwidth() int {
	return 3
}

func (s *state0) ActorKey() string {
	return actors.MarketKey
}

func (s *state0) ActorVersion() actors.Version {
	return actors.Version0
}

func (s *state0) Code() cid.Cid {
	code, ok := actors.GetActorCodeID(s.ActorVersion(), s.ActorKey())
	if !ok {
		panic(fmt.Errorf("didn't find actor %v code id for actor version %d", s.ActorKey(), s.ActorVersion()))
	}

	return code
}
