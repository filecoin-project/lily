// Code generated by: `make actors-gen`. DO NOT EDIT.

package market

import (
	"unicode/utf8"

	"golang.org/x/xerrors"
	"github.com/ipfs/go-cid"

	"github.com/filecoin-project/go-state-types/abi"
	"github.com/filecoin-project/go-state-types/cbor"
	cbg "github.com/whyrusleeping/cbor-gen"

	market{{.latestVersion}} "github.com/filecoin-project/go-state-types/builtin{{import .latestVersion}}market"
{{range .versions}}
    {{if (ge . 8)}}
        builtintypes{{.}} "github.com/filecoin-project/go-state-types/builtin"
	{{else}}
	    builtin{{.}} "github.com/filecoin-project/specs-actors{{import .}}actors/builtin"
    {{end}}
{{end}}

	"github.com/filecoin-project/lotus/chain/actors/adt"
	lotusactors "github.com/filecoin-project/lotus/chain/actors"
	"github.com/filecoin-project/lotus/chain/types"

	"github.com/filecoin-project/lily/chain/actors"
)

var (
	Address = builtintypes{{.latestVersion}}.StorageMarketActorAddr
	Methods = builtintypes{{.latestVersion}}.MethodsMarket
)

func Load(store adt.Store, act *types.Actor) (State, error) {
	if name, av, ok := lotusactors.GetActorMetaByCode(act.Code); ok {
       if name != actors.MarketKey {
          return nil, xerrors.Errorf("actor code is not market: %s", name)
       }

       switch actors.Version(av) {
            {{range .versions}}
                {{if (ge . 8)}}
                case actors.Version{{.}}:
                     return load{{.}}(store, act.Head)
                 {{end}}
            {{end}}
       }
	}

	switch act.Code {
{{range .versions}}
    {{if (le . 7)}}
        case builtin{{.}}.StorageMarketActorCodeID:
            return load{{.}}(store, act.Head)
    {{end}}
{{end}}
	}

	return nil, xerrors.Errorf("unknown actor code %s", act.Code)
}

type State interface {
	cbor.Marshaler

	Code() cid.Cid
	ActorKey() string
	ActorVersion() actors.Version

	StatesChanged(State) (bool, error)
	States() (DealStates, error)
	ProposalsChanged(State) (bool, error)
	Proposals() (DealProposals, error)

	DealProposalsAmtBitwidth() int
	DealStatesAmtBitwidth() int
}

type DealStates interface {
	ForEach(cb func(id abi.DealID, ds DealState) error) error
	Get(id abi.DealID) (*DealState, bool, error)

	array() adt.Array
	decode(*cbg.Deferred) (*DealState, error)
}

type DealProposals interface {
	ForEach(cb func(id abi.DealID, dp market{{.latestVersion}}.DealProposal) error) error
	Get(id abi.DealID) (*market{{.latestVersion}}.DealProposal, bool, error)

	array() adt.Array
	decode(*cbg.Deferred) (*market{{.latestVersion}}.DealProposal, error)
}


type DealProposal = market{{.latestVersion}}.DealProposal

type DealState = market{{.latestVersion}}.DealState

type DealStateChanges struct {
	Added	 []DealIDState
	Modified []DealStateChange
	Removed	 []DealIDState
}

type DealIDState struct {
	ID	 abi.DealID
	Deal DealState
}

// DealStateChange is a change in deal state from -> to
type DealStateChange struct {
	ID	 abi.DealID
	From *DealState
	To	 *DealState
}

type DealProposalChanges struct {
	Added	[]ProposalIDState
	Removed []ProposalIDState
}

type ProposalIDState struct {
	ID		 abi.DealID
	Proposal market{{.latestVersion}}.DealProposal
}

func labelFromGoString(s string) (market{{.latestVersion}}.DealLabel, error) {
	if utf8.ValidString(s) {
		return market{{.latestVersion}}.NewLabelFromString(s)
	} else {
		return market{{.latestVersion}}.NewLabelFromBytes([]byte(s))
	}
}

func AllCodes() []cid.Cid {
	return []cid.Cid{ {{range .versions}}
        (&state{{.}}{}).Code(),
    {{- end}}
    }
}

func VersionCodes() map[actors.Version]cid.Cid {
	return map[actors.Version]cid.Cid{
        {{- range .versions}}
            actors.Version{{.}}: (&state{{.}}{}).Code(),
        {{- end}}
	}
}
