// Code generated by: `make actors-gen`. DO NOT EDIT.
package multisig

import (
	"bytes"
	"fmt"
	"encoding/binary"

	"github.com/filecoin-project/go-address"
	"github.com/filecoin-project/go-state-types/abi"
	"github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	"github.com/filecoin-project/lily/chain/actors"

	"github.com/filecoin-project/lily/chain/actors/adt"

    {{if (le .v 1)}}
        sha256simd "github.com/minio/sha256-simd"
    {{else}}
        "crypto/sha256"
    {{end}}

{{if (le .v 7)}}
    {{if (ge .v 3)}}
        builtin{{.v}} "github.com/filecoin-project/specs-actors{{.import}}actors/builtin"
    {{end}}
        msig{{.v}} "github.com/filecoin-project/specs-actors{{.import}}actors/builtin/multisig"
        adt{{.v}} "github.com/filecoin-project/specs-actors{{.import}}actors/util/adt"
{{else}}
	msig{{.v}} "github.com/filecoin-project/go-state-types/builtin{{.import}}multisig"
	adt{{.v}} "github.com/filecoin-project/go-state-types/builtin{{.import}}util/adt"
	builtin{{.v}} "github.com/filecoin-project/go-state-types/builtin"
{{end}}
)

var _ State = (*state{{.v}})(nil)

func load{{.v}}(store adt.Store, root cid.Cid) (State, error) {
	out := state{{.v}}{store: store}
	err := store.Get(store.Context(), root, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

type state{{.v}} struct {
	msig{{.v}}.State
	store adt.Store
}

func (s *state{{.v}}) LockedBalance(currEpoch abi.ChainEpoch) (abi.TokenAmount, error) {
	return s.State.AmountLocked(currEpoch - s.State.StartEpoch), nil
}

func (s *state{{.v}}) StartEpoch() (abi.ChainEpoch, error) {
	return s.State.StartEpoch, nil
}

func (s *state{{.v}}) UnlockDuration() (abi.ChainEpoch, error) {
	return s.State.UnlockDuration, nil
}

func (s *state{{.v}}) InitialBalance() (abi.TokenAmount, error) {
	return s.State.InitialBalance, nil
}

func (s *state{{.v}}) Threshold() (uint64, error) {
	return s.State.NumApprovalsThreshold, nil
}

func (s *state{{.v}}) Signers() ([]address.Address, error) {
	return s.State.Signers, nil
}

func (s *state{{.v}}) ForEachPendingTxn(cb func(id int64, txn Transaction) error) error {
	arr, err := adt{{.v}}.AsMap(s.store, s.State.PendingTxns{{if (ge .v 3)}}, builtin{{.v}}.DefaultHamtBitwidth{{end}})
	if err != nil {
		return err
	}
	var out msig{{.v}}.Transaction
	return arr.ForEach(&out, func(key string) error {
		txid, n := binary.Varint([]byte(key))
		if n <= 0 {
			return fmt.Errorf("invalid pending transaction key: %v", key)
		}
		return cb(txid, (Transaction)(out)) //nolint:unconvert
	})
}

func (s *state{{.v}}) PendingTxnChanged(other State) (bool, error) {
	other{{.v}}, ok := other.(*state{{.v}})
	if !ok {
		// treat an upgrade as a change, always
		return true, nil
	}
	return !s.State.PendingTxns.Equals(other{{.v}}.PendingTxns), nil
}

func (s *state{{.v}}) PendingTransactionsMap() (adt.Map, error) {
	return adt{{.v}}.AsMap(s.store, s.PendingTxns{{if (ge .v 3)}}, builtin{{.v}}.DefaultHamtBitwidth{{end}})
}

func (s *state{{.v}}) PendingTransactionsMapBitWidth() int {
    {{if (ge .v 3)}}
        return builtin{{.v}}.DefaultHamtBitwidth
    {{else}}
        return 5
    {{end}}
}

func (s *state{{.v}}) PendingTransactionsMapHashFunction() func(input []byte) []byte {
    {{if (le .v 1)}}
        return func(input []byte) []byte {
            res := sha256simd.Sum256(input)
            return res[:]
        }
    {{else}}
        return func(input []byte) []byte {
            res := sha256.Sum256(input)
            return res[:]
        }
    {{end}}
}

func (s *state{{.v}}) decodeTransaction(val *cbg.Deferred) (Transaction, error) {
	var tx msig{{.v}}.Transaction
	if err := tx.UnmarshalCBOR(bytes.NewReader(val.Raw)); err != nil {
		return Transaction{}, err
	}
	return Transaction(tx), nil
}

func (s *state{{.v}}) ActorKey() string {
    return actors.MultisigKey
}

func (s *state{{.v}}) ActorVersion() actors.Version {
    return actors.Version{{.v}}
}

func (s *state{{.v}}) Code() cid.Cid {
	code, ok := actors.GetActorCodeID(s.ActorVersion(), s.ActorKey())
	if !ok {
		panic(fmt.Errorf("didn't find actor %v code id for actor version %d", s.ActorKey(), s.ActorVersion()))
	}

	return code
}
