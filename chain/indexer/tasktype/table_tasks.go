// Code generate by: `make tasks-gen`. DO NOT EDIT.
package tasktype

const (
	BlockHeader                    = "block_header"
	BlockParent                    = "block_parent"
	DrandBlockEntrie               = "drand_block_entrie"
	DataCapBalance                 = "data_cap_balance"
	MinerBeneficiary               = "miner_beneficiary"
	MinerSectorDeal                = "miner_sector_deal"
	MinerSectorDealV2              = "miner_sector_deal_v2"
	MinerSectorInfoV7              = "miner_sector_infos_v7"
	MinerSectorInfoV1_6            = "miner_sector_infos"
	MinerSectorPost                = "miner_sector_post"
	MinerPreCommitInfo             = "miner_pre_commit_info"
	MinerPreCommitInfoV9           = "miner_pre_commit_infos_v9"
	MinerSectorEvent               = "miner_sector_event"
	MinerCurrentDeadlineInfo       = "miner_current_deadline_info"
	MinerFeeDebt                   = "miner_fee_debt"
	MinerLockedFund                = "miner_locked_fund"
	MinerInfo                      = "miner_info"
	MarketDealProposal             = "market_deal_proposal"
	MarketDealState                = "market_deal_state"
	Message                        = "message"
	BlockMessage                   = "block_message"
	Receipt                        = "receipt"
	MessageGasEconomy              = "message_gas_economy"
	ParsedMessage                  = "parsed_message"
	InternalMessage                = "internal_messages"
	InternalParsedMessage          = "internal_parsed_messages"
	VMMessage                      = "vm_messages"
	ActorEvent                     = "actor_events"
	MessageParam                   = "message_params"
	ReceiptReturn                  = "receipt_returns"
	MultisigTransaction            = "multisig_transaction"
	ChainPower                     = "chain_power"
	PowerActorClaim                = "power_actor_claim"
	ChainReward                    = "chain_reward"
	Actor                          = "actor"
	ActorState                     = "actor_state"
	IDAddress                      = "id_addresses"
	GasOutputs                     = "derived_gas_outputs"
	ChainEconomics                 = "chain_economics"
	ChainConsensus                 = "chain_consensus"
	MultisigApproval               = "multisig_approvals"
	VerifiedRegistryVerifier       = "verified_registry_verifier"
	VerifiedRegistryVerifiedClient = "verified_registry_verified_client"
	VerifiedRegistryClaim          = "verified_registry_claim"
	FEVMActorStats                 = "fevm_actor_stats"
	FEVMBlockHeader                = "fevm_block_headers"
	FEVMReceipt                    = "fevm_receipts"
	FEVMTransaction                = "fevm_transactions"
	FEVMContract                   = "fevm_contracts"
	FEVMTrace                      = "fevm_traces"
	FEVMActorDump                  = "fevm_actor_dumps"
	MinerActorDump                 = "miner_actor_dumps"
	BuiltInActorEvent              = "builtin_actor_event"
)

var AllTableTasks = []string{
	BlockHeader,
	BlockParent,
	DrandBlockEntrie,
	DataCapBalance,
	MinerBeneficiary,
	MinerSectorDeal,
	MinerSectorInfoV7,
	MinerSectorInfoV1_6,
	MinerSectorPost,
	MinerPreCommitInfo,
	MinerPreCommitInfoV9,
	MinerSectorEvent,
	MinerCurrentDeadlineInfo,
	MinerFeeDebt,
	MinerLockedFund,
	MinerInfo,
	MarketDealProposal,
	MarketDealState,
	Message,
	BlockMessage,
	Receipt,
	MessageGasEconomy,
	ParsedMessage,
	InternalMessage,
	InternalParsedMessage,
	VMMessage,
	ActorEvent,
	MessageParam,
	ReceiptReturn,
	MultisigTransaction,
	ChainPower,
	PowerActorClaim,
	ChainReward,
	Actor,
	ActorState,
	IDAddress,
	GasOutputs,
	ChainEconomics,
	ChainConsensus,
	MultisigApproval,
	VerifiedRegistryVerifier,
	VerifiedRegistryVerifiedClient,
	VerifiedRegistryClaim,
	FEVMActorStats,
	FEVMBlockHeader,
	FEVMReceipt,
	FEVMTransaction,
	FEVMContract,
	FEVMTrace,
	FEVMActorDump,
	MinerActorDump,
	BuiltInActorEvent,
	MinerSectorDealV2,
}

var TableLookup = map[string]struct{}{
	BlockHeader:                    {},
	BlockParent:                    {},
	DrandBlockEntrie:               {},
	DataCapBalance:                 {},
	MinerBeneficiary:               {},
	MinerSectorDeal:                {},
	MinerSectorInfoV7:              {},
	MinerSectorInfoV1_6:            {},
	MinerSectorPost:                {},
	MinerPreCommitInfo:             {},
	MinerPreCommitInfoV9:           {},
	MinerSectorEvent:               {},
	MinerCurrentDeadlineInfo:       {},
	MinerFeeDebt:                   {},
	MinerLockedFund:                {},
	MinerInfo:                      {},
	MarketDealProposal:             {},
	MarketDealState:                {},
	Message:                        {},
	BlockMessage:                   {},
	Receipt:                        {},
	MessageGasEconomy:              {},
	ParsedMessage:                  {},
	InternalMessage:                {},
	InternalParsedMessage:          {},
	VMMessage:                      {},
	ActorEvent:                     {},
	MessageParam:                   {},
	ReceiptReturn:                  {},
	MultisigTransaction:            {},
	ChainPower:                     {},
	PowerActorClaim:                {},
	ChainReward:                    {},
	Actor:                          {},
	ActorState:                     {},
	IDAddress:                      {},
	GasOutputs:                     {},
	ChainEconomics:                 {},
	ChainConsensus:                 {},
	MultisigApproval:               {},
	VerifiedRegistryVerifier:       {},
	VerifiedRegistryVerifiedClient: {},
	VerifiedRegistryClaim:          {},
	FEVMActorStats:                 {},
	FEVMBlockHeader:                {},
	FEVMReceipt:                    {},
	FEVMTransaction:                {},
	FEVMContract:                   {},
	FEVMTrace:                      {},
	FEVMActorDump:                  {},
	MinerActorDump:                 {},
	BuiltInActorEvent:              {},
	MinerSectorDealV2:              {},
}

var TableComment = map[string]string{
	BlockHeader:                    ``,
	BlockParent:                    ``,
	DrandBlockEntrie:               `DrandBlockEntrie contains Drand randomness round numbers used in each block.`,
	DataCapBalance:                 ``,
	MinerBeneficiary:               ``,
	MinerSectorDeal:                ``,
	MinerSectorInfoV7:              `MinerSectorInfoV7 is the default model exported from the miner actor extractor. the table is returned iff the miner actor code is greater than or equal to v7. The table receives a new name since we cannot rename the miner_sector_info table, else we will break backfill.`,
	MinerSectorInfoV1_6:            `MinerSectorInfoV1_6 is exported from the miner actor iff the actor code is less than v7. The table keeps its original name since that's a requirement to support lily backfills`,
	MinerSectorPost:                ``,
	MinerPreCommitInfo:             ``,
	MinerPreCommitInfoV9:           ``,
	MinerSectorEvent:               ``,
	MinerCurrentDeadlineInfo:       ``,
	MinerFeeDebt:                   ``,
	MinerLockedFund:                ``,
	MinerInfo:                      ``,
	MarketDealProposal:             `MarketDealProposal contains all storage deal states with latest values applied to end_epoch when updates are detected on-chain.`,
	MarketDealState:                ``,
	Message:                        ``,
	BlockMessage:                   ``,
	Receipt:                        ``,
	MessageGasEconomy:              ``,
	ParsedMessage:                  ``,
	InternalMessage:                ``,
	InternalParsedMessage:          ``,
	VMMessage:                      ``,
	ActorEvent:                     ``,
	MessageParam:                   ``,
	ReceiptReturn:                  ``,
	MultisigTransaction:            ``,
	ChainPower:                     ``,
	PowerActorClaim:                ``,
	ChainReward:                    ``,
	Actor:                          `Actor on chain that were added or updated at an epoch. Associates the actor's state root CID (head) with the chain state root CID from which it decends. Includes account ID nonce and balance at each state.`,
	ActorState:                     `ActorState that were changed at an epoch. Associates actors states as single-level trees with CIDs pointing to complete state tree with the root CID (head) for that actor’s state.`,
	IDAddress:                      `IDAddress contains a mapping of ID addresses to robust addresses from the init actor’s state.`,
	GasOutputs:                     ``,
	ChainEconomics:                 ``,
	ChainConsensus:                 ``,
	MultisigApproval:               ``,
	VerifiedRegistryVerifier:       ``,
	VerifiedRegistryVerifiedClient: ``,
	VerifiedRegistryClaim:          ``,
	FEVMActorStats:                 ``,
	FEVMBlockHeader:                ``,
	FEVMReceipt:                    ``,
	FEVMTransaction:                ``,
	FEVMContract:                   ``,
	FEVMTrace:                      ``,
	FEVMActorDump:                  ``,
	MinerActorDump:                 ``,
	BuiltInActorEvent:              ``,
	MinerSectorDealV2:              ``,
}

var TableFieldComments = map[string]map[string]string{
	BlockHeader: {},
	BlockParent: {},
	DrandBlockEntrie: {
		"Block": "Block is the CID of the block.",
		"Round": "Round is the round number of randomness used.",
	},
	DataCapBalance:   {},
	MinerBeneficiary: {},
	MinerSectorDeal:  {},
	MinerSectorInfoV7: {
		"SectorKeyCID": "added in specs-actors v7, will be null for all sectors and only gets set on the first ReplicaUpdate",
	},
	MinerSectorInfoV1_6:      {},
	MinerSectorPost:          {},
	MinerPreCommitInfo:       {},
	MinerPreCommitInfoV9:     {},
	MinerSectorEvent:         {},
	MinerCurrentDeadlineInfo: {},
	MinerFeeDebt:             {},
	MinerLockedFund:          {},
	MinerInfo:                {},
	MarketDealProposal: {
		"ClientCollateral":     "The amount of FIL (in attoFIL) the client has pledged as collateral.",
		"ClientID":             "Address of the actor proposing the deal.",
		"DealID":               "Identifier for the deal.",
		"EndEpoch":             "The epoch at which this deal with end.",
		"Height":               "Epoch at which this deal proposal was added or changed.",
		"IsString":             "When true Label contains a valid UTF-8 string encoded in base64. When false Label contains raw bytes encoded in base64. Related to FIP: https://github.com/filecoin-project/FIPs/blob/master/FIPS/fip-0027.md",
		"IsVerified":           "Deal is with a verified provider.",
		"Label":                "An arbitrary client chosen label to apply to the deal. The value is base64 encoded before persisting.",
		"PaddedPieceSize":      "The piece size in bytes with padding.",
		"PieceCID":             "CID of a sector piece. A Piece is an object that represents a whole or part of a File.",
		"ProviderCollateral":   "The amount of FIL (in attoFIL) the provider has pledged as collateral. The Provider deal collateral is only slashed when a sector is terminated before the deal expires.",
		"ProviderID":           "Address of the actor providing the services.",
		"StartEpoch":           "The epoch at which this deal with begin. Storage deal must appear in a sealed (proven) sector no later than start_epoch, otherwise it is invalid.",
		"StateRoot":            "CID of the parent state root for this deal.",
		"StoragePricePerEpoch": "The amount of FIL (in attoFIL) that will be transferred from the client to the provider every epoch this deal is active for.",
		"UnpaddedPieceSize":    "The piece size in bytes without padding.",
	},
	MarketDealState: {},
	Message:         {},
	BlockMessage:    {},
	Receipt: {
		"ParsedReturn": "Result returned from executing a message parsed and serialized as a JSON object.",
	},
	MessageGasEconomy:     {},
	ParsedMessage:         {},
	InternalMessage:       {},
	InternalParsedMessage: {},
	VMMessage: {
		"ActorCode": "ActorCode of To (receiver).",
		"Cid":       "Cid of the message.",
		"ExitCode":  "ExitCode of message execution.",
		"From":      "From sender of message.",
		"GasUsed":   "GasUsed by message.",
		"Height":    "Height message was executed at.",
		"Index":     "Index indicating the order of the messages execution.",
		"Method":    "Method called on To (receiver).",
		"Params":    "Params contained in message.",
		"Returns":   "Returns value of message receipt.",
		"Source":    "On-chain message triggering the message.",
		"StateRoot": "StateRoot message was applied to.",
		"To":        "To receiver of message.",
		"Value":     "Value attoFIL contained in message.",
	},
	ActorEvent:    {},
	MessageParam:  {},
	ReceiptReturn: {},
	MultisigTransaction: {
		"To": "Transaction State",
	},
	ChainPower:      {},
	PowerActorClaim: {},
	ChainReward:     {},
	Actor: {
		"Balance":   "Balance of Actor in attoFIL.",
		"Code":      "Human-readable identifier for the type of the actor.",
		"CodeCID":   "CID identifier for the type of the actor.",
		"Head":      "CID of the root of the state tree for the actor.",
		"Height":    "Epoch when this actor was created or updated.",
		"ID":        "ID Actor address.",
		"Nonce":     "The next Actor nonce that is expected to appear on chain.",
		"State":     "Top level of state data as json.",
		"StateRoot": "CID of the state root when this actor was created or changed.",
	},
	ActorState: {
		"Address": "Address of actor.",
		"Code":    "CID identifier for the type of the actor.",
		"Head":    "CID of the root of the state tree for the actor.",
		"Height":  "Epoch when this actor was created or updated.",
		"State":   "Top level of state data as json.",
	},
	IDAddress: {
		"Address":   "Robust address",
		"Height":    "Epoch when this address mapping was created or updated.",
		"ID":        "ID address",
		"StateRoot": "StateRoot when this address mapping was created or updated.",
	},
	GasOutputs:                     {},
	ChainEconomics:                 {},
	ChainConsensus:                 {},
	MultisigApproval:               {},
	VerifiedRegistryVerifier:       {},
	VerifiedRegistryVerifiedClient: {},
	VerifiedRegistryClaim:          {},
	FEVMActorStats: {
		"ContractBalance":     "Balance of EVM actor in attoFIL.",
		"ContractCount":       "number of contracts",
		"EthAccountBalance":   "Balance of Eth account actor in attoFIL.",
		"EthAccountCount":     "number of Eth account actors",
		"Height":              "Height message was executed at.",
		"PlaceholderBalance":  "Balance of Placeholder Actor in attoFIL.",
		"PlaceholderCount":    "number of placeholder actors",
		"UniqueContractCount": "number of unique contracts",
	},
	FEVMBlockHeader: {
		"BaseFeePerGas":    "The base fee value.",
		"Difficulty":       "ETH mining difficulty.",
		"ExtraData":        "Arbitrary additional data as raw bytes.",
		"GasLimit":         "Maximum gas allowed in this block.",
		"GasUsed":          "The actual amount of gas used in this block.",
		"Hash":             "ETH Hash",
		"Height":           "Height message was executed at.",
		"Miner":            "ETH Address of the miner who mined this block.",
		"Number":           "The number of the current block.",
		"ParentHash":       "Parent Block ETH Hash",
		"ReceiptsRoot":     "Hash of the transaction receipts trie.",
		"Size":             "Block size.",
		"StateRoot":        "Block state root ETH hash.",
		"Timestamp":        "The block time.",
		"TransactionsRoot": "Set to a hardcoded value which is used by some clients to determine if has no transactions.",
	},
	FEVMReceipt: {
		"BlockHash":         "Hash of the block where this transaction was in.",
		"BlockNumber":       "Block number where this transaction was in.",
		"ContractAddress":   "The contract address created, if the transaction was a contract creation, otherwise null.",
		"CumulativeGasUsed": "The total amount of gas used when this transaction was executed in the block.",
		"EffectiveGasPrice": "The actual value per gas deducted from the senders account.",
		"From":              "ETH Address of the sender.",
		"GasUsed":           "The actual amount of gas used in this block.",
		"Height":            "Height message was executed at.",
		"Logs":              "Array of log objects, which this transaction generated.",
		"LogsBloom":         "Includes the bloom filter representation of the logs",
		"Message":           "Message CID",
		"Status":            "0 indicates transaction failure , 1 indicates transaction succeeded.",
		"To":                "ETH Address of the receiver.",
		"TransactionHash":   "Hash of transaction.",
		"TransactionIndex":  "Integer of the transactions index position in the block.",
	},
	FEVMTransaction: {
		"BlockHash":            "Hash of the block where this transaction was in.",
		"BlockNumber":          "Block number where this transaction was in.",
		"ChainID":              "EVM network id.",
		"From":                 "ETH Address of the sender.",
		"FromActorName":        "Human-readable identifier of sender (From).",
		"FromFilecoinAddress":  "Filecoin Address of the sender.",
		"Gas":                  "Gas provided by the sender.",
		"Hash":                 "Hash of transaction.",
		"Height":               "Height message was executed at.",
		"Input":                "The data sent along with the transaction.",
		"MaxFeePerGas":         "The maximum fee per unit of gas willing to be paid for the transaction.",
		"MaxPriorityFeePerGas": "The maximum price of the consumed gas to be included as a tip to the validator.",
		"MessageCid":           "On-chain message triggering the message.",
		"Nonce":                "A sequentially incrementing counter which indicates the transaction number from the account.",
		"R":                    "Transaction’s signature. Outputs of an ECDSA signature.",
		"S":                    "Transaction’s signature. Outputs of an ECDSA signature.",
		"To":                   "ETH Address of the receiver.",
		"ToActorName":          "Human-readable identifier of receiver (To).",
		"ToFilecoinAddress":    "Filecoin Address of the receiver.",
		"TransactionIndex":     "Integer of the transactions index position in the block.",
		"Type":                 "Type of transactions.",
		"V":                    "Transaction’s signature. Recovery Identifier.",
		"Value":                "Amount of FIL to transfer from sender to recipient.",
	},
	FEVMContract: {
		"ActorID":      "Actor address.",
		"Balance":      "Balance of EVM actor in attoFIL.",
		"ByteCode":     "Contract Bytecode.",
		"ByteCodeHash": "Contract Bytecode is encoded in hash by Keccak256.",
		"EthAddress":   "Actor Address in ETH.",
		"Height":       "Height message was executed at.",
		"Nonce":        "The next actor nonce that is expected to appear on chain.",
	},
	FEVMTrace: {
		"ActorCode":           "ActorCode of To (receiver) as a CID.",
		"ExitCode":            "ExitCode of message execution.",
		"From":                "ETH Address of the sender.",
		"FromActorName":       "Human-readable identifier of sender (From).",
		"FromFilecoinAddress": "Filecoin Address of the sender.",
		"Height":              "Height message was executed at.",
		"Index":               "Index indicating the order of the messages execution.",
		"MessageCid":          "On-chain message triggering the message.",
		"MessageStateRoot":    "StateRoot message was applied to.",
		"Method":              "Method called on To (receiver).",
		"Params":              "Params contained in message encode in eth bytes.",
		"ParamsCodec":         "Params codec.",
		"ParsedMethod":        "Method in readable name.",
		"ParsedParams":        "Params contained in message.",
		"ParsedReturns":       "Returns value of message receipt.",
		"Returns":             "Returns value of message receipt encode in eth bytes.",
		"ReturnsCodec":        "Returns codec.",
		"To":                  "ETH Address of the receiver.",
		"ToActorName":         "Human-readable identifier of receiver (To).",
		"ToFilecoinAddress":   "Filecoin Address of the receiver.",
		"TraceCid":            "Cid of the trace.",
		"TransactionHash":     "On-chain message ETH transaction hash",
		"Value":               "Value attoFIL contained in message.",
	},
	FEVMActorDump: {
		"ActorID":      "Actor address.",
		"ActorName":    "Actor Name",
		"Balance":      "Balance of EVM actor in attoFIL.",
		"ByteCode":     "Contract Bytecode.",
		"ByteCodeHash": "Contract Bytecode is encoded in hash by Keccak256.",
		"EthAddress":   "Actor Address in ETH.",
		"Height":       "Height message was executed at.",
		"Nonce":        "The next actor nonce that is expected to appear on chain.",
	},
	MinerActorDump: {
		"AvailableBalance": "Balance",
		"OwnerID":          "Miner Info",
		"RawBytePower":     "Claims",
		"TotalLockedFunds": "Locked Funds",
	},
	BuiltInActorEvent: {},
	MinerSectorDealV2: {},
}
