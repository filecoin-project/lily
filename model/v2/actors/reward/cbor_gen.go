// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package reward

import (
	"fmt"
	"io"
	"math"
	"sort"

	abi "github.com/filecoin-project/go-state-types/abi"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

var lengthBufChainReward = []byte{139}

func (t *ChainReward) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufChainReward); err != nil {
		return err
	}

	// t.Height (abi.ChainEpoch) (int64)
	if t.Height >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Height)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Height-1)); err != nil {
			return err
		}
	}

	// t.StateRoot (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.StateRoot); err != nil {
		return xerrors.Errorf("failed to write cid field t.StateRoot: %w", err)
	}

	// t.ThisEpochBaselinePower (big.Int) (struct)
	if err := t.ThisEpochBaselinePower.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.ThisEpochReward (big.Int) (struct)
	if err := t.ThisEpochReward.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.ThisEpochRewardSmoothedPositionEstimate (big.Int) (struct)
	if err := t.ThisEpochRewardSmoothedPositionEstimate.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.ThisEpochRewardSmoothedVelocityEstimate (big.Int) (struct)
	if err := t.ThisEpochRewardSmoothedVelocityEstimate.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.EffectiveBaselinePower (big.Int) (struct)
	if err := t.EffectiveBaselinePower.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.EffectiveNetworkTime (abi.ChainEpoch) (int64)
	if t.EffectiveNetworkTime >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.EffectiveNetworkTime)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.EffectiveNetworkTime-1)); err != nil {
			return err
		}
	}

	// t.TotalStoragePowerReward (big.Int) (struct)
	if err := t.TotalStoragePowerReward.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.CumSumBaseline (big.Int) (struct)
	if err := t.CumSumBaseline.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.CumSumRealized (big.Int) (struct)
	if err := t.CumSumRealized.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *ChainReward) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ChainReward{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 11 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Height (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cr.ReadHeader()
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Height = abi.ChainEpoch(extraI)
	}
	// t.StateRoot (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.StateRoot: %w", err)
		}

		t.StateRoot = c

	}
	// t.ThisEpochBaselinePower (big.Int) (struct)

	{

		if err := t.ThisEpochBaselinePower.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.ThisEpochBaselinePower: %w", err)
		}

	}
	// t.ThisEpochReward (big.Int) (struct)

	{

		if err := t.ThisEpochReward.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.ThisEpochReward: %w", err)
		}

	}
	// t.ThisEpochRewardSmoothedPositionEstimate (big.Int) (struct)

	{

		if err := t.ThisEpochRewardSmoothedPositionEstimate.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.ThisEpochRewardSmoothedPositionEstimate: %w", err)
		}

	}
	// t.ThisEpochRewardSmoothedVelocityEstimate (big.Int) (struct)

	{

		if err := t.ThisEpochRewardSmoothedVelocityEstimate.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.ThisEpochRewardSmoothedVelocityEstimate: %w", err)
		}

	}
	// t.EffectiveBaselinePower (big.Int) (struct)

	{

		if err := t.EffectiveBaselinePower.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.EffectiveBaselinePower: %w", err)
		}

	}
	// t.EffectiveNetworkTime (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cr.ReadHeader()
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.EffectiveNetworkTime = abi.ChainEpoch(extraI)
	}
	// t.TotalStoragePowerReward (big.Int) (struct)

	{

		if err := t.TotalStoragePowerReward.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.TotalStoragePowerReward: %w", err)
		}

	}
	// t.CumSumBaseline (big.Int) (struct)

	{

		if err := t.CumSumBaseline.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.CumSumBaseline: %w", err)
		}

	}
	// t.CumSumRealized (big.Int) (struct)

	{

		if err := t.CumSumRealized.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.CumSumRealized: %w", err)
		}

	}
	return nil
}
