version: 2.1
orbs:
  go: gotest/tools@0.0.9
  codecov: codecov/codecov@1.0.2

executors:
  dockerizer:
    docker:
      - image: cimg/go:1.15.2
    environment:
      IMAGE_NAME: filecoin/sentinel-visor
  golang:
    docker:
      - image: circleci/golang:1.15

commands:
  install-deps:
    steps:
      - go/install-ssh
      - go/install: {package: git}
  prepare:
    parameters:
      linux:
        default: true
        description: is a linux build environment?
        type: boolean
    steps:
      - checkout
      - when:
          condition: << parameters.linux >>
          steps:
            - run: sudo apt-get update
            - run: sudo apt-get install -y ocl-icd-opencl-dev libhwloc-dev
            - run: sudo apt-get install -y pkg-config jq
      - run: git submodule sync
      - run: sudo apt-get install gcc libc-dev
      - run: git submodule update --init
  publish-docker-master-production:
    steps:
      - run:
          name: Build Production Docker image
          command: docker build -t $IMAGE_NAME -f Dockerfile .
      - run:
          name: Publish Production Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            tag_suffix=$(echo "$CIRCLE_SHA1" | cut -c 1-8)
            ./scripts/push-docker-tags.sh "${IMAGE_NAME}" "$CIRCLE_SHA1" "${CIRCLE_BRANCH}-${tag_suffix}"
  publish-docker-master-dev:
    steps:
      - run:
          name: Build Dev Docker image
          command: docker build -t ${IMAGE_NAME} -f Dockerfile.dev .
      - run:
          name: Publish Dev Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            tag_suffix=$(echo "$CIRCLE_SHA1" | cut -c 1-8)
            ./scripts/push-docker-tags.sh "${IMAGE_NAME}" "$CIRCLE_SHA1" "${CIRCLE_BRANCH}-${tag_suffix}-dev"
  publish-docker-semver-production:
    steps:
      - run:
          name: Build Production Semver Docker image
          command: docker build -t ${IMAGE_NAME} -f Dockerfile .
      - run:
          name: Publish Production Semver Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            ./scripts/push-docker-tags.sh "${IMAGE_NAME}" "$CIRCLE_SHA1" "${CIRCLE_TAG}"
  publish-docker-semver-dev:
    steps:
      - run:
          name: Build Dev Semver Docker image
          command: docker build -t ${IMAGE_NAME} -f Dockerfile.dev .
      - run:
          name: Publish Dev Semver Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            ./scripts/push-docker-tags.sh "${IMAGE_NAME}" "$CIRCLE_SHA1" "${CIRCLE_TAG}-dev"

jobs:
  publish-docker-from-master:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "18.09.3"
      - publish-docker-master-dev
      - publish-docker-master-production
  publish-docker-from-tag:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "18.09.3"
      - publish-docker-semver-dev
      - publish-docker-semver-production
  mod-tidy-check:
    executor: golang
    steps:
      - install-deps
      - prepare
      - go/mod-tidy-check
  test:
    resource_class: large
    docker:
      - image: cimg/go:1.15.2
      - image: timescale/timescaledb:1.7.4-pg12
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - prepare
      - run: # dep for DB wait script
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run: sudo apt-get update
      - run: make deps
      - run: make build
      - run:
          name: waiting for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: 
          name: installing schema
          command: ./visor migrate --latest
          environment:
            LOTUS_DB: postgres://postgres:password@localhost:5432/postgres?sslmode=disable
      - run:
          command: |
            make test-coverage
            mkdir -p /tmp/artifacts
            mv coverage.out /tmp/artifacts/coverage.out
      - codecov/upload:
          file: /tmp/artifacts/coverage.out
      - store_artifacts:
          path: sentinel-visor
  lint: &lint
    description: |
      Run golangci-lint.
    parameters:
      executor:
        type: executor
        default: golang
      golangci-lint-version:
        type: string
        default: 1.28.2
      concurrency:
        type: string
        default: '2'
        description: |
          Concurrency used to run linters. Defaults to 2 because NumCPU is not
          aware of container CPU limits.
      args:
        type: string
        default: ''
        description: |
          Arguments to pass to golangci-lint
    executor: << parameters.executor >>
    steps:
      - install-deps
      - prepare
      - run: make deps
      - run:
          command: make -j3 support/tools/bin/golangci-lint
      - run:
          name: Lint
          command: |
            support/tools/bin/golangci-lint run -v \
              --timeout 5m --concurrency << parameters.concurrency >> ./...
  lint-all:
    <<: *lint
  test-docker:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "18.09.3"
      - run:
          name: Build Production Docker image
          command: docker build -t ${IMAGE_NAME} -f Dockerfile .
      - run:
          name: Build Dev Semver Docker image
          command: docker build -t ${IMAGE_NAME}-dev -f Dockerfile.dev .

workflows:
  version: 2
  check:
    # `test` and `mod-tidy-check` runs for all branches
    jobs:
      - mod-tidy-check
      - lint-all
      - test
      - test-docker
  build-docker-images:
    # `build-push-*` runs on master or main branches and tags that look like semver
    # see: https://circleci.com/docs/2.0/workflows/#executing-workflows-for-a-git-tag
    jobs:
      - publish-docker-from-master:
          # build and push latest master docker image
          filters:
            branches:
              only: /^(master|main)$/
            tags:
              ignore: /.*/
      - publish-docker-from-tag:
          # build and push semver tags docker image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)*/  # incl v0.0.0 or v0.0.0-rc0

