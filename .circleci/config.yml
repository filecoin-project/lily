version: 2.1
orbs:
  go: gotest/tools@0.0.9
  codecov: codecov/codecov@1.0.2

executors:
  dockerizer:
    docker:
      - image: cimg/go:1.15.2
    environment:
      IMAGE_NAME: filecoin/sentinel-visor
  golang:
    docker:
      - image: circleci/golang:1.13

commands:
  install-deps:
    steps:
      - go/install-ssh
      - go/install: {package: git}
  prepare:
    parameters:
      linux:
        default: true
        description: is a linux build environment?
        type: boolean
    steps:
      - checkout
      - when:
          condition: << parameters.linux >>
          steps:
            - run: sudo apt-get update
      - run: git submodule sync
      - run: git submodule update --init

jobs:
  mod-tidy-check:
    executor: golang
    steps:
      - install-deps
      - prepare
      - go/mod-tidy-check

  test:
    docker:
      - image: cimg/go:1.15.2
      - image: timescale/timescaledb:latest-pg12
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run: sudo apt-get update
      - run: sudo apt-get install -y pkg-config jq
      - run: make deps
      - run: make build
      - run:
          name: waiting for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: ./visor migrate --latest
      - run:
          command: |
            make test-coverage
            mkdir -p /tmp/artifacts
            mv coverage.out /tmp/artifacts/coverage.out
      - codecov/upload:
          file: /tmp/artifacts/coverage.out
      - store_artifacts:
          path: sentinel-visor

  docker-build:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          version: "18.09.3"
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME .
      - run:
          name: Archive Docker image
          command: docker save -o docker-image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./docker-image.tar

  docker-push:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          version: "18.09.3"
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/docker-image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            ./scripts/push-docker-tags.sh "$IMAGE_NAME" "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$CIRCLE_TAG"

workflows:
  version: 2
  check:
    # `test` runs for all branches
    # `docker-build` runs for all branches and tags that look like semver
    # `docker-push` runs master or main branches and tags that look like semver
    # see: https://circleci.com/docs/2.0/workflows/#executing-workflows-for-a-git-tag
    jobs:
      - mod-tidy-check
      - test
      - docker-build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)*/  # incl v0.0.0 or v0.0.0-rc0
      - docker-push:
          requires:
            - docker-build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)*/  # incl v0.0.0 or v0.0.0-rc0
