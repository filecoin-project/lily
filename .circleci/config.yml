version: 2.1
orbs:
  go: gotest/tools@0.0.9
  codecov: codecov/codecov@1.0.2

executors:
  dockerizer:
    docker:
      - image: cimg/go:1.17.6
    environment:
      IMAGE_NAME: filecoin/lily
  golang:
    docker:
      - image: cimg/go:1.17.6

commands:
  install-deps:
    steps:
      - go/install-ssh
      - go/install: {package: git}
  prepare:
    parameters:
      linux:
        default: true
        description: is a linux build environment?
        type: boolean
    steps:
      - checkout
      - when:
          condition: << parameters.linux >>
          steps:
            - run: sudo apt-get update
            - run: sudo apt-get install -y ocl-icd-opencl-dev libhwloc-dev
            - run: sudo apt-get install -y pkg-config jq
      - run: git submodule sync
      - run: sudo apt-get install gcc libc-dev
      - run: git submodule update --init
  validate-docker-executeable:
    steps:
      - run:
          name: Run lily within the docker image
          command: docker run --rm filecoin/lily:latest
  publish-docker-from-branch-production:
    steps:
      - run:
          name: Publish Mainnet Production Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            tag_suffix=$(echo "$CIRCLE_SHA1" | cut -c 1-8)
            LILY_VERSION=$(git describe --always --tag --dirty) LILY_IMAGE_TAG=${CIRCLE_BRANCH//\//-}-${tag_suffix} make docker-mainnet-push
      - run:
          name: Publish Calibnet Production Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            tag_suffix=$(echo "$CIRCLE_SHA1" | cut -c 1-8)
            LILY_VERSION=$(git describe --always --tag --dirty) LILY_IMAGE_TAG=${CIRCLE_BRANCH//\//-}-${tag_suffix}-calibnet make docker-calibnet-push
  publish-docker-from-branch-dev:
    steps:
      - run:
          name: Publish Mainnet Dev Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            tag_suffix=$(echo "$CIRCLE_SHA1" | cut -c 1-8)
            LILY_VERSION=$(git describe --always --tag --dirty) LILY_IMAGE_TAG=${CIRCLE_BRANCH//\//-}-${tag_suffix}-dev make docker-mainnet-dev-push
      - run:
          name: Publish Calibnet Dev Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            tag_suffix=$(echo "$CIRCLE_SHA1" | cut -c 1-8)
            LILY_VERSION=$(git describe --always --tag --dirty) LILY_IMAGE_TAG=${CIRCLE_BRANCH//\//-}-${tag_suffix}-calibnet-dev make docker-calibnet-dev-push
  publish-docker-semver-production:
    steps:
      - run:
          name: Publish Mainnet Production Semver Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            LILY_VERSION=$(git describe --always --tag --dirty) LILY_IMAGE_TAG=${CIRCLE_TAG//\//-} make docker-mainnet-push
            # omit release candidates from pushing latest
            if [[ ! "$CIRCLE_TAG" =~ -rc[0-9]+$ ]]; then
              LILY_VERSION=$(git describe --always --tag --dirty) LILY_IMAGE_TAG=latest make docker-mainnet-push
            fi
      - run:
          name: Publish Calibnet Production Semver Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            LILY_VERSION=$(git describe --always --tag --dirty) LILY_IMAGE_TAG=${CIRCLE_TAG//\//-}-calibnet make docker-calibnet-push
            # omit release candidates from pushing calibnet-latest
            if [[ ! "$CIRCLE_TAG" =~ -rc[0-9]+$ ]]; then
              LILY_VERSION=$(git describe --always --tag --dirty) LILY_IMAGE_TAG=calibnet-latest make docker-calibnet-push
            fi
  publish-docker-semver-dev:
    steps:
      - run:
          name: Publish Mainnet Dev Semver Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            LILY_VERSION=$(git describe --always --tag --dirty) LILY_IMAGE_TAG=${CIRCLE_TAG//\//-}-dev make docker-mainnet-dev-push
      - run:
          name: Publish Calibnet Dev Semver Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            LILY_VERSION=$(git describe --always --tag --dirty) LILY_IMAGE_TAG=${CIRCLE_TAG//\//-}-calibnet-dev make docker-calibnet-dev-push

jobs:
  publish-docker-from-master:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.6"
      - publish-docker-from-branch-dev
      - publish-docker-from-branch-production
  publish-docker-from-tag:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.6"
      - publish-docker-semver-dev
      - publish-docker-semver-production
  mod-tidy-check:
    executor: golang
    steps:
      - install-deps
      - prepare
      - go/mod-tidy-check
  test:
    resource_class: large
    docker:
      - image: cimg/go:1.17.6
      - image: timescale/timescaledb:2.5.0-pg13
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - prepare
      - run: # dep for DB wait script
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run: sudo apt-get update
      - run: make deps
      - run: make build
      - run:
          name: waiting for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: 
          name: installing schema
          command: ./lily migrate --latest
          environment:
            LILY_DB: postgres://postgres:password@localhost:5432/postgres?sslmode=disable
      - run:
          command: |
            make test-coverage
            mkdir -p /tmp/artifacts
            mv coverage.out /tmp/artifacts/coverage.out
      - codecov/upload:
          file: /tmp/artifacts/coverage.out
      - store_artifacts:
          path: lily
  integration-test:
    resource_class: large
    docker:
      - image: cimg/go:1.17.6
      - image: timescale/timescaledb:2.5.0-pg13
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - prepare
      - run: # dep for DB wait script
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run: sudo apt-get update
      - run: make deps
      - run: make build
      - run:
          name: waiting for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: installing schema
          command: ./lily migrate --latest
          environment:
            LILY_DB: postgres://postgres:password@localhost:5432/postgres?sslmode=disable
      - restore_cache:
          name: restore test vectors cache
          key: lily-test-vectors-{{ checksum "./build/test-vectors/vectors.json" }}
          paths:
            - /var/tmp/lily-test-vectors/
      - run:
          command: make itest
      - save_cache:
          name: save test vectors cache
          key: lily-test-vectors-{{ checksum "./build/test-vectors/vectors.json" }}
          paths:
            - /var/tmp/lily-test-vectors/
  lint: &lint
    description: |
      Run golangci-lint.
    parameters:
      executor:
        type: executor
        default: golang
      golangci-lint-version:
        type: string
        default: 1.28.2
      concurrency:
        type: string
        default: '2'
        description: |
          Concurrency used to run linters. Defaults to 2 because NumCPU is not
          aware of container CPU limits.
      args:
        type: string
        default: ''
        description: |
          Arguments to pass to golangci-lint
    executor: << parameters.executor >>
    steps:
      - install-deps
      - prepare
      - run: make deps
      - run:
          name: Install staticcheck
          command: go install honnef.co/go/tools/cmd/staticcheck@434f5f3816b358fe468fa83dcba62d794e7fe04b # 2021.1 (v0.2.0)
      - run:
          name: gofmt
          command: |
            out=$(gofmt -l . | { grep -v extern || true; })
            if [[ -n "$out" ]]; then
              echo $out | awk '{print "::error file=" $0 ",line=0,col=0::File is not gofmt-ed."}'
              exit 1
            fi
      - run:
          name: go vet
          command: go vet $(go list ./... | grep -v /tasks/messages/types)
      - run:
          name: staticcheck
          command: |
            set -o pipefail
            staticcheck ./... | sed -e 's@\(.*\)\.go@./\1.go@g'
  lint-all:
    <<: *lint
  test-docker-mainnet:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.6"
      - run:
          name: Build Production Mainnet Docker image
          command: make docker-mainnet
      - validate-docker-executeable
  test-docker-mainnet-dev:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.6"
      - run:
          name: Build Dev Mainnet Docker image
          command: make docker-mainnet-dev
      - validate-docker-executeable
  test-docker-calibnet:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.6"
      - run:
          name: Build Production Calibnet Docker image
          command: make docker-calibnet
      - validate-docker-executeable
  test-docker-calibnet-dev:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.6"
      - run:
          name: Build Dev Calibnet Docker image
          command: make docker-calibnet-dev
      - validate-docker-executeable

workflows:
  version: 2
  check:
    # `test` and `mod-tidy-check` runs for all branches
    jobs:
      - mod-tidy-check
      - lint-all
      - test
      - integration-test
      - test-docker-mainnet
      - test-docker-mainnet-dev
      - test-docker-calibnet
      - test-docker-calibnet-dev
  build-docker-images:
    # `build-push-*` runs on master or main branches and tags that look like semver
    # see: https://circleci.com/docs/2.0/workflows/#executing-workflows-for-a-git-tag
    jobs:
      - publish-docker-from-master:
          # build and push latest master docker image
          filters:
            branches:
              only: /^(master|main)$/
            tags:
              ignore: /.*/
      - publish-docker-from-tag:
          # build and push semver tags docker image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)*/  # incl v0.0.0 or v0.0.0-rc0

