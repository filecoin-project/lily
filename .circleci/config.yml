version: 2.1
orbs:
  go: gotest/tools@0.0.9
  codecov: codecov/codecov@1.0.2

executors:
  dockerizer:
    docker:
      - image: cimg/go:1.18.7
    environment:
      IMAGE_NAME: filecoin/lily
  golang:
    docker:
      - image: cimg/go:1.18.7

commands:
  install-deps:
    steps:
      - go/install-ssh
      - go/install: {package: git}
  prepare:
    parameters:
      linux:
        default: true
        description: is a linux build environment?
        type: boolean
    steps:
      - checkout
      - when:
          condition: << parameters.linux >>
          steps:
            - run: sudo apt-get update
            - run: sudo apt-get install -y ocl-icd-opencl-dev libhwloc-dev
            - run: sudo apt-get install -y pkg-config jq
      - run: git submodule sync
      - run: sudo apt-get install gcc libc-dev
      - run: git submodule update --init
  validate-docker-executeable:
    steps:
      - run:
          name: Run lily within the docker image
          command: docker run --rm filecoin/lily:latest --version

jobs:
  publish-production-image-from-branch-for-mainnet:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.14"
      - run:
          name: Publish Mainnet Production Docker Image from Lily branch to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            sanitized_branch=`echo $CIRCLE_BRANCH | sed 's:/:-:g'`
            tag_suffix=$(echo "$CIRCLE_SHA1" | cut -c 1-8)
            tag_date=$(date +%Y%m%d%H%M)
            make docker-mainnet-push LILY_IMAGE_TAG=${sanitized_branch}-${tag_date}-${tag_suffix}
  publish-production-image-from-branch-for-calibnet:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.14"
      - run:
          name: Publish Calibnet Production Docker Image from Lily branch to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            sanitized_branch=`echo $CIRCLE_BRANCH | sed 's:/:-:g'`
            tag_suffix=$(echo "$CIRCLE_SHA1" | cut -c 1-8)
            tag_date=$(date +%Y%m%d%H%M)
            make docker-calibnet-push LILY_IMAGE_TAG=${sanitized_branch}-${tag_date}-${tag_suffix}-calibnet
  publish-production-image-from-branch-for-butterflynet:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.14"
      - run:
          name: Publish Butterflynet Production Docker Image from Lily branch to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            sanitized_branch=`echo $CIRCLE_BRANCH | sed 's:/:-:g'`
            tag_suffix=$(echo "$CIRCLE_SHA1" | cut -c 1-8)
            tag_date=$(date +%Y%m%d%H%M)
            make docker-butterflynet-push LILY_IMAGE_TAG=${sanitized_branch}-${tag_date}-${tag_suffix}-butterflynet
  publish-production-image-from-semver-tag-for-mainnet:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.14"
      - run:
          name: Publish Mainnet Production Docker Image from Lily semver tag to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            sanitized_tag=`echo $CIRCLE_TAG | sed 's:/:-:g'`
            LILY_IMAGE_TAG=$sanitized_tag make docker-mainnet-push
            # omit release candidates from pushing latest
            # only semver releases are pushing mainnet-latest
            if [[ "$CIRCLE_TAG" =~ ^(v[0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
              LILY_IMAGE_TAG=latest make docker-mainnet-push
            fi
  publish-production-image-from-semver-tag-for-calibnet:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.14"
      - run:
          name: Publish Calibnet Production Docker Image from Lily semver tag to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            sanitized_tag=`echo $CIRCLE_TAG | sed 's:/:-:g'`
            LILY_IMAGE_TAG=$sanitized_tag-calibnet make docker-calibnet-push
            # only semver releases are pushing calibnet-latest
            if [[ "$CIRCLE_TAG" =~ ^(v[0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
              LILY_IMAGE_TAG=calibnet-latest make docker-calibnet-push
            fi
  publish-production-image-from-semver-tag-for-butterflynet:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.14"
      - run:
          name: Publish Butterflynet Production Docker Image from Lily semver tag to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            sanitized_tag=`echo $CIRCLE_TAG | sed 's:/:-:g'`
            LILY_IMAGE_TAG=$sanitized_tag-butterflynet make docker-butterflynet-push
            # only semver releases are pushing butterflynet-latest
            if [[ "$CIRCLE_TAG" =~ ^(v[0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
              LILY_IMAGE_TAG=butterflynet-latest make docker-butterflynet-push
            fi
  mod-tidy-check:
    executor: golang
    steps:
      - install-deps
      - prepare
      - go/mod-tidy-check
  test:
    resource_class: xlarge
    docker:
      - image: cimg/go:1.18.7
      - image: timescale/timescaledb:2.5.0-pg13
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - prepare
      - run: # dep for DB wait script
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run: sudo apt-get update
      - run: make deps
      - run: make build
      - run:
          name: waiting for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: 
          name: installing schema
          command: ./lily migrate --latest
          environment:
            LILY_DB: postgres://postgres:password@localhost:5432/postgres?sslmode=disable
      - run:
          command: |
            make test-coverage
            mkdir -p /tmp/artifacts
            mv coverage.out /tmp/artifacts/coverage.out
      - codecov/upload:
          file: /tmp/artifacts/coverage.out
      - store_artifacts:
          path: lily
  integration-test:
    resource_class: large
    docker:
      - image: cimg/go:1.18.7
      - image: timescale/timescaledb:2.5.0-pg13
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - prepare
      - run: # dep for DB wait script
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run: sudo apt-get update
      - run: make deps
      - run: make build
      - run:
          name: waiting for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: installing schema
          command: ./lily migrate --latest
          environment:
            LILY_DB: postgres://postgres:password@localhost:5432/postgres?sslmode=disable
      - restore_cache:
          name: restore test vectors cache
          key: lily-test-vectors-{{ checksum "./build/test-vectors/vectors.json" }}
          paths:
            - /var/tmp/lily-test-vectors/
      - run:
          command: make itest
      - save_cache:
          name: save test vectors cache
          key: lily-test-vectors-{{ checksum "./build/test-vectors/vectors.json" }}
          paths:
            - /var/tmp/lily-test-vectors/

  lint: &lint
    description: |
      Run golangci-lint.
    parameters:
      executor:
        type: executor
        default: golang
      golangci-lint-version:
        type: string
        default: 1.28.2
      concurrency:
        type: string
        default: '2'
        description: |
          Concurrency used to run linters. Defaults to 2 because NumCPU is not
          aware of container CPU limits.
      args:
        type: string
        default: ''
        description: |
          Arguments to pass to golangci-lint
    executor: << parameters.executor >>
    steps:
      - install-deps
      - prepare
      - run: make build
      - run:
          command: make -j3 support/tools/bin/golangci-lint
      - run:
          name: Lint
          command: |
            support/tools/bin/golangci-lint run -v --timeout 5m \
              --concurrency << parameters.concurrency >> << parameters.args >>
  lint-all:
    <<: *lint

  test-docker-mainnet:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.14"
      - run:
          name: Build Production Mainnet Docker image
          command: make docker-mainnet
      - validate-docker-executeable
  test-docker-mainnet-dev:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.14"
      - run:
          name: Build Dev Mainnet Docker image
          command: make docker-mainnet-dev
      - validate-docker-executeable
  test-docker-calibnet:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.14"
      - run:
          name: Build Production Calibnet Docker image
          command: make docker-calibnet
      - validate-docker-executeable
  test-docker-calibnet-dev:
    executor: dockerizer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.14"
      - run:
          name: Build Dev Calinet Docker image
          command: make docker-calibnet-dev
      - validate-docker-executeable


# build and deploy branches which match these rules
# used in `build-docker-images` workflow below
branch_filters: &branch_filters
  branches:
    only: cd/staging
  tags:
    ignore: /.*/

# build and deploy tags which match these rules
# used in `build-docker-images` workflow below
tag_filters: &tag_filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+((-rc[0-9]+)|(-dev))*$/  # matches vN.N.N, vN.N.N-rcN, or vN.N.N-dev

workflows:
  version: 2
  check:
    # `test` and `mod-tidy-check` runs for all branches
    jobs:
      - mod-tidy-check
      - lint-all:
          concurrency: "8"
      - test
      - integration-test
      - test-docker-mainnet
      - test-docker-mainnet-dev
      - test-docker-calibnet
      - test-docker-calibnet-dev
  build-docker-images:
    jobs:
      # only publish staging images for mainnet and calibnet
      - publish-production-image-from-branch-for-mainnet:
          filters:
            <<: *branch_filters
      - publish-production-image-from-branch-for-calibnet:
          filters:
            <<: *branch_filters
      #- publish-production-image-from-branch-for-butterflynet:
          #filters:
            #<<: *branch_filters
      - publish-production-image-from-semver-tag-for-mainnet:
          filters:
            <<: *tag_filters
      - publish-production-image-from-semver-tag-for-calibnet:
          filters:
            <<: *tag_filters
      - publish-production-image-from-semver-tag-for-butterflynet:
          filters:
            <<: *tag_filters

