// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package minerdiff

import (
	"fmt"
	"io"
	"math"
	"sort"

	core "github.com/filecoin-project/lily/pkg/core"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *SectorStatusChange) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{164}); err != nil {
		return err
	}

	// t.Removed (bitfield.BitField) (struct)
	if len("removed") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"removed\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("removed"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("removed")); err != nil {
		return err
	}

	if err := t.Removed.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Recovering (bitfield.BitField) (struct)
	if len("recovering") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"recovering\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("recovering"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("recovering")); err != nil {
		return err
	}

	if err := t.Recovering.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Faulted (bitfield.BitField) (struct)
	if len("faulted") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"faulted\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("faulted"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("faulted")); err != nil {
		return err
	}

	if err := t.Faulted.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Recovered (bitfield.BitField) (struct)
	if len("recovered") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"recovered\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("recovered"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("recovered")); err != nil {
		return err
	}

	if err := t.Recovered.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *SectorStatusChange) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SectorStatusChange{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("SectorStatusChange: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Removed (bitfield.BitField) (struct)
		case "removed":

			{

				if err := t.Removed.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Removed: %w", err)
				}

			}
			// t.Recovering (bitfield.BitField) (struct)
		case "recovering":

			{

				if err := t.Recovering.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Recovering: %w", err)
				}

			}
			// t.Faulted (bitfield.BitField) (struct)
		case "faulted":

			{

				if err := t.Faulted.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Faulted: %w", err)
				}

			}
			// t.Recovered (bitfield.BitField) (struct)
		case "recovered":

			{

				if err := t.Recovered.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Recovered: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *PreCommitChange) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{164}); err != nil {
		return err
	}

	// t.SectorNumber ([]uint8) (slice)
	if len("sector_number") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"sector_number\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("sector_number"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("sector_number")); err != nil {
		return err
	}

	if len(t.SectorNumber) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.SectorNumber was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.SectorNumber))); err != nil {
		return err
	}

	if _, err := cw.Write(t.SectorNumber[:]); err != nil {
		return err
	}

	// t.Current (typegen.Deferred) (struct)
	if len("current_pre_commit") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"current_pre_commit\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("current_pre_commit"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("current_pre_commit")); err != nil {
		return err
	}

	if err := t.Current.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Previous (typegen.Deferred) (struct)
	if len("previous_pre_commit") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"previous_pre_commit\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("previous_pre_commit"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("previous_pre_commit")); err != nil {
		return err
	}

	if err := t.Previous.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Change (core.ChangeType) (uint8)
	if len("change") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"change\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("change"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("change")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Change)); err != nil {
		return err
	}
	return nil
}

func (t *PreCommitChange) UnmarshalCBOR(r io.Reader) (err error) {
	*t = PreCommitChange{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("PreCommitChange: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.SectorNumber ([]uint8) (slice)
		case "sector_number":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.SectorNumber: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.SectorNumber = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.SectorNumber[:]); err != nil {
				return err
			}
			// t.Current (typegen.Deferred) (struct)
		case "current_pre_commit":

			{

				t.Current = new(cbg.Deferred)

				if err := t.Current.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("failed to read deferred field: %w", err)
				}
			}
			// t.Previous (typegen.Deferred) (struct)
		case "previous_pre_commit":

			{

				t.Previous = new(cbg.Deferred)

				if err := t.Previous.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("failed to read deferred field: %w", err)
				}
			}
			// t.Change (core.ChangeType) (uint8)
		case "change":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajUnsignedInt {
				return fmt.Errorf("wrong type for uint8 field")
			}
			if extra > math.MaxUint8 {
				return fmt.Errorf("integer in input was too large for uint8 field")
			}
			t.Change = core.ChangeType(extra)

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *SectorChange) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{164}); err != nil {
		return err
	}

	// t.SectorNumber (uint64) (uint64)
	if len("sector_number") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"sector_number\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("sector_number"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("sector_number")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.SectorNumber)); err != nil {
		return err
	}

	// t.Current (typegen.Deferred) (struct)
	if len("current_sector") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"current_sector\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("current_sector"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("current_sector")); err != nil {
		return err
	}

	if err := t.Current.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Previous (typegen.Deferred) (struct)
	if len("previous_sector") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"previous_sector\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("previous_sector"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("previous_sector")); err != nil {
		return err
	}

	if err := t.Previous.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Change (core.ChangeType) (uint8)
	if len("change") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"change\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("change"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("change")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Change)); err != nil {
		return err
	}
	return nil
}

func (t *SectorChange) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SectorChange{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("SectorChange: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.SectorNumber (uint64) (uint64)
		case "sector_number":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.SectorNumber = uint64(extra)

			}
			// t.Current (typegen.Deferred) (struct)
		case "current_sector":

			{

				t.Current = new(cbg.Deferred)

				if err := t.Current.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("failed to read deferred field: %w", err)
				}
			}
			// t.Previous (typegen.Deferred) (struct)
		case "previous_sector":

			{

				t.Previous = new(cbg.Deferred)

				if err := t.Previous.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("failed to read deferred field: %w", err)
				}
			}
			// t.Change (core.ChangeType) (uint8)
		case "change":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajUnsignedInt {
				return fmt.Errorf("wrong type for uint8 field")
			}
			if extra > math.MaxUint8 {
				return fmt.Errorf("integer in input was too large for uint8 field")
			}
			t.Change = core.ChangeType(extra)

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *FundsChange) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{164}); err != nil {
		return err
	}

	// t.VestingFunds (big.Int) (struct)
	if len("vesting_funds") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"vesting_funds\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("vesting_funds"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("vesting_funds")); err != nil {
		return err
	}

	if err := t.VestingFunds.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.InitialPledgeRequirement (big.Int) (struct)
	if len("initial_pledge_requirement") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"initial_pledge_requirement\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("initial_pledge_requirement"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("initial_pledge_requirement")); err != nil {
		return err
	}

	if err := t.InitialPledgeRequirement.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.PreCommitDeposit (big.Int) (struct)
	if len("pre_commit_deposit") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"pre_commit_deposit\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("pre_commit_deposit"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("pre_commit_deposit")); err != nil {
		return err
	}

	if err := t.PreCommitDeposit.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Change (core.ChangeType) (uint8)
	if len("change") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"change\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("change"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("change")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Change)); err != nil {
		return err
	}
	return nil
}

func (t *FundsChange) UnmarshalCBOR(r io.Reader) (err error) {
	*t = FundsChange{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("FundsChange: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.VestingFunds (big.Int) (struct)
		case "vesting_funds":

			{

				if err := t.VestingFunds.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.VestingFunds: %w", err)
				}

			}
			// t.InitialPledgeRequirement (big.Int) (struct)
		case "initial_pledge_requirement":

			{

				if err := t.InitialPledgeRequirement.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.InitialPledgeRequirement: %w", err)
				}

			}
			// t.PreCommitDeposit (big.Int) (struct)
		case "pre_commit_deposit":

			{

				if err := t.PreCommitDeposit.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.PreCommitDeposit: %w", err)
				}

			}
			// t.Change (core.ChangeType) (uint8)
		case "change":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajUnsignedInt {
				return fmt.Errorf("wrong type for uint8 field")
			}
			if extra > math.MaxUint8 {
				return fmt.Errorf("integer in input was too large for uint8 field")
			}
			t.Change = core.ChangeType(extra)

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *DebtChange) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.FeeDebt (big.Int) (struct)
	if len("fee_debt") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"fee_debt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("fee_debt"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("fee_debt")); err != nil {
		return err
	}

	if err := t.FeeDebt.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Change (core.ChangeType) (uint8)
	if len("change") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"change\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("change"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("change")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Change)); err != nil {
		return err
	}
	return nil
}

func (t *DebtChange) UnmarshalCBOR(r io.Reader) (err error) {
	*t = DebtChange{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("DebtChange: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.FeeDebt (big.Int) (struct)
		case "fee_debt":

			{

				if err := t.FeeDebt.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.FeeDebt: %w", err)
				}

			}
			// t.Change (core.ChangeType) (uint8)
		case "change":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajUnsignedInt {
				return fmt.Errorf("wrong type for uint8 field")
			}
			if extra > math.MaxUint8 {
				return fmt.Errorf("integer in input was too large for uint8 field")
			}
			t.Change = core.ChangeType(extra)

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
