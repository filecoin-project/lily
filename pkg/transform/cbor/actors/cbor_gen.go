// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package actors

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *ActorStateChangesIPLD) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{167}); err != nil {
		return err
	}

	// t.DataCapActor (cid.Cid) (struct)
	if len("datacap") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"datacap\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("datacap"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("datacap")); err != nil {
		return err
	}

	if t.DataCapActor == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.DataCapActor); err != nil {
			return xerrors.Errorf("failed to write cid field t.DataCapActor: %w", err)
		}
	}

	// t.InitActor (cid.Cid) (struct)
	if len("init") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"init\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("init"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("init")); err != nil {
		return err
	}

	if t.InitActor == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.InitActor); err != nil {
			return xerrors.Errorf("failed to write cid field t.InitActor: %w", err)
		}
	}

	// t.MarketActor (cid.Cid) (struct)
	if len("market") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"market\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("market"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("market")); err != nil {
		return err
	}

	if t.MarketActor == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.MarketActor); err != nil {
			return xerrors.Errorf("failed to write cid field t.MarketActor: %w", err)
		}
	}

	// t.MinerActors (cid.Cid) (struct)
	if len("miner") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"miner\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("miner"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("miner")); err != nil {
		return err
	}

	if t.MinerActors == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.MinerActors); err != nil {
			return xerrors.Errorf("failed to write cid field t.MinerActors: %w", err)
		}
	}

	// t.PowerActor (cid.Cid) (struct)
	if len("power") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"power\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("power"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("power")); err != nil {
		return err
	}

	if t.PowerActor == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.PowerActor); err != nil {
			return xerrors.Errorf("failed to write cid field t.PowerActor: %w", err)
		}
	}

	// t.RawActors (cid.Cid) (struct)
	if len("raw") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"raw\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("raw"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("raw")); err != nil {
		return err
	}

	if t.RawActors == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.RawActors); err != nil {
			return xerrors.Errorf("failed to write cid field t.RawActors: %w", err)
		}
	}

	// t.VerifregActor (cid.Cid) (struct)
	if len("verifreg") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"verifreg\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("verifreg"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("verifreg")); err != nil {
		return err
	}

	if t.VerifregActor == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.VerifregActor); err != nil {
			return xerrors.Errorf("failed to write cid field t.VerifregActor: %w", err)
		}
	}

	return nil
}

func (t *ActorStateChangesIPLD) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ActorStateChangesIPLD{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ActorStateChangesIPLD: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.DataCapActor (cid.Cid) (struct)
		case "datacap":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.DataCapActor: %w", err)
					}

					t.DataCapActor = &c
				}

			}
			// t.InitActor (cid.Cid) (struct)
		case "init":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.InitActor: %w", err)
					}

					t.InitActor = &c
				}

			}
			// t.MarketActor (cid.Cid) (struct)
		case "market":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.MarketActor: %w", err)
					}

					t.MarketActor = &c
				}

			}
			// t.MinerActors (cid.Cid) (struct)
		case "miner":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.MinerActors: %w", err)
					}

					t.MinerActors = &c
				}

			}
			// t.PowerActor (cid.Cid) (struct)
		case "power":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.PowerActor: %w", err)
					}

					t.PowerActor = &c
				}

			}
			// t.RawActors (cid.Cid) (struct)
		case "raw":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.RawActors: %w", err)
					}

					t.RawActors = &c
				}

			}
			// t.VerifregActor (cid.Cid) (struct)
		case "verifreg":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.VerifregActor: %w", err)
					}

					t.VerifregActor = &c
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
