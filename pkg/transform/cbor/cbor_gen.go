// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package cbor

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *RootStateIPLD) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{164}); err != nil {
		return err
	}

	// t.StateVersion (uint64) (uint64)
	if len("stateversion") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"stateversion\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("stateversion"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("stateversion")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.StateVersion)); err != nil {
		return err
	}

	// t.NetworkName (string) (string)
	if len("networkname") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"networkname\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("networkname"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("networkname")); err != nil {
		return err
	}

	if len(t.NetworkName) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.NetworkName was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.NetworkName))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.NetworkName)); err != nil {
		return err
	}

	// t.NetworkVersion (uint64) (uint64)
	if len("networkversion") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"networkversion\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("networkversion"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("networkversion")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.NetworkVersion)); err != nil {
		return err
	}

	// t.State (cid.Cid) (struct)
	if len("state") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"state\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("state"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("state")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.State); err != nil {
		return xerrors.Errorf("failed to write cid field t.State: %w", err)
	}

	return nil
}

func (t *RootStateIPLD) UnmarshalCBOR(r io.Reader) (err error) {
	*t = RootStateIPLD{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("RootStateIPLD: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.StateVersion (uint64) (uint64)
		case "stateversion":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.StateVersion = uint64(extra)

			}
			// t.NetworkName (string) (string)
		case "networkname":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.NetworkName = string(sval)
			}
			// t.NetworkVersion (uint64) (uint64)
		case "networkversion":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.NetworkVersion = uint64(extra)

			}
			// t.State (cid.Cid) (struct)
		case "state":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.State: %w", err)
				}

				t.State = c

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *StateExtractionIPLD) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{172}); err != nil {
		return err
	}

	// t.Current (types.TipSet) (struct)
	if len("current") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"current\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("current"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("current")); err != nil {
		return err
	}

	if err := t.Current.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Parent (types.TipSet) (struct)
	if len("parent") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"parent\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("parent"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("parent")); err != nil {
		return err
	}

	if err := t.Parent.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.BaseFee (big.Int) (struct)
	if len("basefee") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"basefee\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("basefee"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("basefee")); err != nil {
		return err
	}

	if err := t.BaseFee.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.FilVested (big.Int) (struct)
	if len("filvested") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"filvested\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("filvested"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("filvested")); err != nil {
		return err
	}

	if err := t.FilVested.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.FilMined (big.Int) (struct)
	if len("filmined") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"filmined\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("filmined"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("filmined")); err != nil {
		return err
	}

	if err := t.FilMined.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.FilBurnt (big.Int) (struct)
	if len("filburnt") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"filburnt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("filburnt"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("filburnt")); err != nil {
		return err
	}

	if err := t.FilBurnt.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.FilLocked (big.Int) (struct)
	if len("fillocked") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"fillocked\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("fillocked"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("fillocked")); err != nil {
		return err
	}

	if err := t.FilLocked.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.FilCirculating (big.Int) (struct)
	if len("filcirculating") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"filcirculating\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("filcirculating"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("filcirculating")); err != nil {
		return err
	}

	if err := t.FilCirculating.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.FilReserveDisbursed (big.Int) (struct)
	if len("filreserveddisbursed") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"filreserveddisbursed\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("filreserveddisbursed"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("filreserveddisbursed")); err != nil {
		return err
	}

	if err := t.FilReserveDisbursed.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.FullBlocks (cid.Cid) (struct)
	if len("fullblocks") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"fullblocks\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("fullblocks"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("fullblocks")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.FullBlocks); err != nil {
		return xerrors.Errorf("failed to write cid field t.FullBlocks: %w", err)
	}

	// t.ImplicitMessages (cid.Cid) (struct)
	if len("implicitmessages") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"implicitmessages\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("implicitmessages"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("implicitmessages")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.ImplicitMessages); err != nil {
		return xerrors.Errorf("failed to write cid field t.ImplicitMessages: %w", err)
	}

	// t.Actors (cid.Cid) (struct)
	if len("actors") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"actors\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("actors"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("actors")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.Actors); err != nil {
		return xerrors.Errorf("failed to write cid field t.Actors: %w", err)
	}

	return nil
}

func (t *StateExtractionIPLD) UnmarshalCBOR(r io.Reader) (err error) {
	*t = StateExtractionIPLD{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("StateExtractionIPLD: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Current (types.TipSet) (struct)
		case "current":

			{

				if err := t.Current.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Current: %w", err)
				}

			}
			// t.Parent (types.TipSet) (struct)
		case "parent":

			{

				if err := t.Parent.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Parent: %w", err)
				}

			}
			// t.BaseFee (big.Int) (struct)
		case "basefee":

			{

				if err := t.BaseFee.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.BaseFee: %w", err)
				}

			}
			// t.FilVested (big.Int) (struct)
		case "filvested":

			{

				if err := t.FilVested.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.FilVested: %w", err)
				}

			}
			// t.FilMined (big.Int) (struct)
		case "filmined":

			{

				if err := t.FilMined.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.FilMined: %w", err)
				}

			}
			// t.FilBurnt (big.Int) (struct)
		case "filburnt":

			{

				if err := t.FilBurnt.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.FilBurnt: %w", err)
				}

			}
			// t.FilLocked (big.Int) (struct)
		case "fillocked":

			{

				if err := t.FilLocked.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.FilLocked: %w", err)
				}

			}
			// t.FilCirculating (big.Int) (struct)
		case "filcirculating":

			{

				if err := t.FilCirculating.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.FilCirculating: %w", err)
				}

			}
			// t.FilReserveDisbursed (big.Int) (struct)
		case "filreserveddisbursed":

			{

				if err := t.FilReserveDisbursed.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.FilReserveDisbursed: %w", err)
				}

			}
			// t.FullBlocks (cid.Cid) (struct)
		case "fullblocks":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.FullBlocks: %w", err)
				}

				t.FullBlocks = c

			}
			// t.ImplicitMessages (cid.Cid) (struct)
		case "implicitmessages":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.ImplicitMessages: %w", err)
				}

				t.ImplicitMessages = c

			}
			// t.Actors (cid.Cid) (struct)
		case "actors":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.Actors: %w", err)
				}

				t.Actors = c

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
