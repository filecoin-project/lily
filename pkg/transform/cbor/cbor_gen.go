// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package cbor

import (
	"fmt"
	"io"
	"math"
	"sort"

	types "github.com/filecoin-project/lotus/chain/types"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *ActorIPLDContainer) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{163}); err != nil {
		return err
	}

	// t.CurrentTipSet (types.TipSet) (struct)
	if len("CurrentTipSet") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CurrentTipSet\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CurrentTipSet"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CurrentTipSet")); err != nil {
		return err
	}

	if err := t.CurrentTipSet.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.ExecutedTipSet (types.TipSet) (struct)
	if len("ExecutedTipSet") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ExecutedTipSet\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ExecutedTipSet"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ExecutedTipSet")); err != nil {
		return err
	}

	if err := t.ExecutedTipSet.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.MinerActors (cid.Cid) (struct)
	if len("MinerActors") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"MinerActors\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("MinerActors"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("MinerActors")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.MinerActors); err != nil {
		return xerrors.Errorf("failed to write cid field t.MinerActors: %w", err)
	}

	return nil
}

func (t *ActorIPLDContainer) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ActorIPLDContainer{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ActorIPLDContainer: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.CurrentTipSet (types.TipSet) (struct)
		case "CurrentTipSet":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.CurrentTipSet = new(types.TipSet)
					if err := t.CurrentTipSet.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.CurrentTipSet pointer: %w", err)
					}
				}

			}
			// t.ExecutedTipSet (types.TipSet) (struct)
		case "ExecutedTipSet":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.ExecutedTipSet = new(types.TipSet)
					if err := t.ExecutedTipSet.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.ExecutedTipSet pointer: %w", err)
					}
				}

			}
			// t.MinerActors (cid.Cid) (struct)
		case "MinerActors":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.MinerActors: %w", err)
				}

				t.MinerActors = c

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
