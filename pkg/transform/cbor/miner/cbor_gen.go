// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package miner

import (
	"fmt"
	"io"
	"math"
	"sort"

	core "github.com/filecoin-project/lily/pkg/core"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *StateChange) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{167}); err != nil {
		return err
	}

	// t.Miner (address.Address) (struct)
	if len("miner") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"miner\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("miner"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("miner")); err != nil {
		return err
	}

	if err := t.Miner.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Funds (cid.Cid) (struct)
	if len("funds") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"funds\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("funds"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("funds")); err != nil {
		return err
	}

	if t.Funds == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.Funds); err != nil {
			return xerrors.Errorf("failed to write cid field t.Funds: %w", err)
		}
	}

	// t.Debt (cid.Cid) (struct)
	if len("debt") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"debt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("debt"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("debt")); err != nil {
		return err
	}

	if t.Debt == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.Debt); err != nil {
			return xerrors.Errorf("failed to write cid field t.Debt: %w", err)
		}
	}

	// t.SectorStatus (cid.Cid) (struct)
	if len("sector_status") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"sector_status\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("sector_status"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("sector_status")); err != nil {
		return err
	}

	if t.SectorStatus == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.SectorStatus); err != nil {
			return xerrors.Errorf("failed to write cid field t.SectorStatus: %w", err)
		}
	}

	// t.Info (cid.Cid) (struct)
	if len("info") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"info\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("info"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("info")); err != nil {
		return err
	}

	if t.Info == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.Info); err != nil {
			return xerrors.Errorf("failed to write cid field t.Info: %w", err)
		}
	}

	// t.PreCommits (cid.Cid) (struct)
	if len("pre_commits") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"pre_commits\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("pre_commits"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("pre_commits")); err != nil {
		return err
	}

	if t.PreCommits == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.PreCommits); err != nil {
			return xerrors.Errorf("failed to write cid field t.PreCommits: %w", err)
		}
	}

	// t.Sectors (cid.Cid) (struct)
	if len("sectors") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"sectors\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("sectors"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("sectors")); err != nil {
		return err
	}

	if t.Sectors == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.Sectors); err != nil {
			return xerrors.Errorf("failed to write cid field t.Sectors: %w", err)
		}
	}

	return nil
}

func (t *StateChange) UnmarshalCBOR(r io.Reader) (err error) {
	*t = StateChange{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("StateChange: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Miner (address.Address) (struct)
		case "miner":

			{

				if err := t.Miner.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Miner: %w", err)
				}

			}
			// t.Funds (cid.Cid) (struct)
		case "funds":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.Funds: %w", err)
					}

					t.Funds = &c
				}

			}
			// t.Debt (cid.Cid) (struct)
		case "debt":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.Debt: %w", err)
					}

					t.Debt = &c
				}

			}
			// t.SectorStatus (cid.Cid) (struct)
		case "sector_status":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.SectorStatus: %w", err)
					}

					t.SectorStatus = &c
				}

			}
			// t.Info (cid.Cid) (struct)
		case "info":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.Info: %w", err)
					}

					t.Info = &c
				}

			}
			// t.PreCommits (cid.Cid) (struct)
		case "pre_commits":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.PreCommits: %w", err)
					}

					t.PreCommits = &c
				}

			}
			// t.Sectors (cid.Cid) (struct)
		case "sectors":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.Sectors: %w", err)
					}

					t.Sectors = &c
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *Info) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.Info (cid.Cid) (struct)
	if len("info") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"info\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("info"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("info")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.Info); err != nil {
		return xerrors.Errorf("failed to write cid field t.Info: %w", err)
	}

	// t.Change (core.ChangeType) (uint8)
	if len("change") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"change\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("change"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("change")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Change)); err != nil {
		return err
	}
	return nil
}

func (t *Info) UnmarshalCBOR(r io.Reader) (err error) {
	*t = Info{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("Info: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Info (cid.Cid) (struct)
		case "info":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.Info: %w", err)
				}

				t.Info = c

			}
			// t.Change (core.ChangeType) (uint8)
		case "change":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajUnsignedInt {
				return fmt.Errorf("wrong type for uint8 field")
			}
			if extra > math.MaxUint8 {
				return fmt.Errorf("integer in input was too large for uint8 field")
			}
			t.Change = core.ChangeType(extra)

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
